import extend from '@interactjs/utils/extend';
import * as is from '@interactjs/utils/is';
import rectUtils from '@interactjs/utils/rect';
function start({ rect, startOffset, state, interaction, pageCoords }) {
    const { options } = state;
    const { elementRect } = options;
    const offset = extend({
        left: 0,
        top: 0,
        right: 0,
        bottom: 0,
    }, options.offset || {});
    if (rect && elementRect) {
        const restriction = getRestrictionRect(options.restriction, interaction, pageCoords);
        if (restriction) {
            const widthDiff = (restriction.right - restriction.left) - rect.width;
            const heightDiff = (restriction.bottom - restriction.top) - rect.height;
            if (widthDiff < 0) {
                offset.left += widthDiff;
                offset.right += widthDiff;
            }
            if (heightDiff < 0) {
                offset.top += heightDiff;
                offset.bottom += heightDiff;
            }
        }
        offset.left += startOffset.left - (rect.width * elementRect.left);
        offset.top += startOffset.top - (rect.height * elementRect.top);
        offset.right += startOffset.right - (rect.width * (1 - elementRect.right));
        offset.bottom += startOffset.bottom - (rect.height * (1 - elementRect.bottom));
    }
    state.offset = offset;
}
function set({ coords, interaction, state }) {
    const { options, offset } = state;
    const restriction = getRestrictionRect(options.restriction, interaction, coords);
    if (!restriction) {
        return;
    }
    const rect = rectUtils.xywhToTlbr(restriction);
    coords.x = Math.max(Math.min(rect.right - offset.right, coords.x), rect.left + offset.left);
    coords.y = Math.max(Math.min(rect.bottom - offset.bottom, coords.y), rect.top + offset.top);
}
function getRestrictionRect(value, interaction, coords) {
    if (is.func(value)) {
        return rectUtils.resolveRectLike(value, interaction.interactable, interaction.element, [coords.x, coords.y, interaction]);
    }
    else {
        return rectUtils.resolveRectLike(value, interaction.interactable, interaction.element);
    }
}
const defaults = {
    restriction: null,
    elementRect: null,
    offset: null,
    endOnly: false,
    enabled: false,
};
const restrict = {
    start,
    set,
    getRestrictionRect,
    defaults,
};
export default restrict;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBvaW50ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxNQUFNLE1BQU0sMEJBQTBCLENBQUE7QUFDN0MsT0FBTyxLQUFLLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUMxQyxPQUFPLFNBQVMsTUFBTSx3QkFBd0IsQ0FBQTtBQWtCOUMsU0FBUyxLQUFLLENBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUE4QjtJQUMvRixNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsS0FBSyxDQUFBO0lBQ3pCLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxPQUFPLENBQUE7SUFDL0IsTUFBTSxNQUFNLEdBQWtCLE1BQU0sQ0FBQztRQUNuQyxJQUFJLEVBQUUsQ0FBQztRQUNQLEdBQUcsRUFBRSxDQUFDO1FBQ04sS0FBSyxFQUFFLENBQUM7UUFDUixNQUFNLEVBQUUsQ0FBQztLQUNWLEVBQUUsT0FBTyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUV4QixJQUFJLElBQUksSUFBSSxXQUFXLEVBQUU7UUFDdkIsTUFBTSxXQUFXLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUE7UUFFcEYsSUFBSSxXQUFXLEVBQUU7WUFDZixNQUFNLFNBQVMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUE7WUFDckUsTUFBTSxVQUFVLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO1lBRXZFLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRTtnQkFDakIsTUFBTSxDQUFDLElBQUksSUFBSSxTQUFTLENBQUE7Z0JB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SUFDSCxrQkFBa0I7SUFDbEIsUUFBUTtDQUNULENBQUE7QUFFRCxlQUFlLFFBQVEsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHRlbmQgZnJvbSAnQGludGVyYWN0anMvdXRpbHMvZXh0ZW5kJ1xuaW1wb3J0ICogYXMgaXMgZnJvbSAnQGludGVyYWN0anMvdXRpbHMvaXMnXG5pbXBvcnQgcmVjdFV0aWxzIGZyb20gJ0BpbnRlcmFjdGpzL3V0aWxzL3JlY3QnXG5pbXBvcnQgeyBNb2RpZmllckFyZywgTW9kaWZpZXJTdGF0ZSB9IGZyb20gJy4uL2Jhc2UnXG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzdHJpY3RPcHRpb25zIHtcbiAgLy8gd2hlcmUgdG8gZHJhZyBvdmVyXG4gIHJlc3RyaWN0aW9uOiBJbnRlcmFjdC5SZWN0UmVzb2x2YWJsZTxbbnVtYmVyLCBudW1iZXIsIEludGVyYWN0LkludGVyYWN0aW9uXT5cbiAgLy8gd2hhdCBwYXJ0IG9mIHNlbGYgaXMgYWxsb3dlZCB0byBkcmFnIG92ZXJcbiAgZWxlbWVudFJlY3Q6IEludGVyYWN0LlJlY3RcbiAgb2Zmc2V0OiBJbnRlcmFjdC5SZWN0XG4gIC8vIHJlc3RyaWN0IGp1c3QgYmVmb3JlIHRoZSBlbmQgZHJhZ1xuICBlbmRPbmx5OiBib29sZWFuXG4gIGVuYWJsZWQ/OiBib29sZWFuXG59XG5cbmV4cG9ydCB0eXBlIFJlc3RyaWN0U3RhdGUgPSBNb2RpZmllclN0YXRlPFJlc3RyaWN0T3B0aW9ucywge1xuICBvZmZzZXQ6IEludGVyYWN0LlJlY3Rcbn0+XG5cbmZ1bmN0aW9uIHN0YXJ0ICh7IHJlY3QsIHN0YXJ0T2Zmc2V0LCBzdGF0ZSwgaW50ZXJhY3Rpb24sIHBhZ2VDb29yZHMgfTogTW9kaWZpZXJBcmc8UmVzdHJpY3RTdGF0ZT4pIHtcbiAgY29uc3QgeyBvcHRpb25zIH0gPSBzdGF0ZVxuICBjb25zdCB7IGVsZW1lbnRSZWN0IH0gPSBvcHRpb25zXG4gIGNvbnN0IG9mZnNldDogSW50ZXJhY3QuUmVjdCA9IGV4dGVuZCh7XG4gICAgbGVmdDogMCxcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICB9LCBvcHRpb25zLm9mZnNldCB8fCB7fSlcblxuICBpZiAocmVjdCAmJiBlbGVtZW50UmVjdCkge1xuICAgIGNvbnN0IHJlc3RyaWN0aW9uID0gZ2V0UmVzdHJpY3Rpb25SZWN0KG9wdGlvbnMucmVzdHJpY3Rpb24sIGludGVyYWN0aW9uLCBwYWdlQ29vcmRzKVxuXG4gICAgaWYgKHJlc3RyaWN0aW9uKSB7XG4gICAgICBjb25zdCB3aWR0aERpZmYgPSAocmVzdHJpY3Rpb24ucmlnaHQgLSByZXN0cmljdGlvbi5sZWZ0KSAtIHJlY3Qud2lkdGhcbiAgICAgIGNvbnN0IGhlaWdodERpZmYgPSAocmVzdHJpY3Rpb24uYm90dG9tIC0gcmVzdHJpY3Rpb24udG9wKSAtIHJlY3QuaGVpZ2h0XG5cbiAgICAgIGlmICh3aWR0aERpZmYgPCAwKSB7XG4gICAgICAgIG9mZnNldC5sZWZ0ICs9IHdpZHRoRGlmZlxuICAgICAgICBvZmZzZXQucmlnaHQgKz0gd2lkdGhEaWZmXG4gICAgICB9XG4gICAgICBpZiAoaGVpZ2h0RGlmZiA8IDApIHtcbiAgICAgICAgb2Zmc2V0LnRvcCArPSBoZWlnaHREaWZmXG4gICAgICAgIG9mZnNldC5ib3R0b20gKz0gaGVpZ2h0RGlmZlxuICAgICAgfVxuICAgIH1cblxuICAgIG9mZnNldC5sZWZ0ICs9IHN0YXJ0T2Zmc2V0LmxlZnQgLSAocmVjdC53aWR0aCAgKiBlbGVtZW50UmVjdC5sZWZ0KVxuICAgIG9mZnNldC50b3AgICs9IHN0YXJ0T2Zmc2V0LnRvcCAgLSAocmVjdC5oZWlnaHQgKiBlbGVtZW50UmVjdC50b3ApXG5cbiAgICBvZmZzZXQucmlnaHQgICs9IHN0YXJ0T2Zmc2V0LnJpZ2h0ICAtIChyZWN0LndpZHRoICAqICgxIC0gZWxlbWVudFJlY3QucmlnaHQpKVxuICAgIG9mZnNldC5ib3R0b20gKz0gc3RhcnRPZmZzZXQuYm90dG9tIC0gKHJlY3QuaGVpZ2h0ICogKDEgLSBlbGVtZW50UmVjdC5ib3R0b20pKVxuICB9XG5cbiAgc3RhdGUub2Zmc2V0ID0gb2Zmc2V0XG59XG5cbmZ1bmN0aW9uIHNldCAoeyBjb29yZHMsIGludGVyYWN0aW9uLCBzdGF0ZSB9KSB7XG4gIGNvbnN0IHsgb3B0aW9ucywgb2Zmc2V0IH0gPSBzdGF0ZVxuXG4gIGNvbnN0IHJlc3RyaWN0aW9uID0gZ2V0UmVzdHJpY3Rpb25SZWN0KG9wdGlvbnMucmVzdHJpY3Rpb24sIGludGVyYWN0aW9uLCBjb29yZHMpXG5cbiAgaWYgKCFyZXN0cmljdGlvbikgeyByZXR1cm4gfVxuXG4gIGNvbnN0IHJlY3QgPSByZWN0VXRpbHMueHl3aFRvVGxicihyZXN0cmljdGlvbilcblxuICBjb29yZHMueCA9IE1hdGgubWF4KE1hdGgubWluKHJlY3QucmlnaHQgIC0gb2Zmc2V0LnJpZ2h0LCBjb29yZHMueCksIHJlY3QubGVmdCArIG9mZnNldC5sZWZ0KVxuICBjb29yZHMueSA9IE1hdGgubWF4KE1hdGgubWluKHJlY3QuYm90dG9tIC0gb2Zmc2V0LmJvdHRvbSwgY29vcmRzLnkpLCByZWN0LnRvcCAgKyBvZmZzZXQudG9wKVxufVxuXG5mdW5jdGlvbiBnZXRSZXN0cmljdGlvblJlY3QgKHZhbHVlLCBpbnRlcmFjdGlvbiwgY29vcmRzPzogSW50ZXJhY3QuUG9pbnQpIHtcbiAgaWYgKGlzLmZ1bmModmFsdWUpKSB7XG4gICAgcmV0dXJuIHJlY3RVdGlscy5yZXNvbHZlUmVjdExpa2UodmFsdWUsIGludGVyYWN0aW9uLmludGVyYWN0YWJsZSwgaW50ZXJhY3Rpb24uZWxlbWVudCwgW2Nvb3Jkcy54LCBjb29yZHMueSwgaW50ZXJhY3Rpb25dKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiByZWN0VXRpbHMucmVzb2x2ZVJlY3RMaWtlKHZhbHVlLCBpbnRlcmFjdGlvbi5pbnRlcmFjdGFibGUsIGludGVyYWN0aW9uLmVsZW1lbnQpXG4gIH1cbn1cblxuY29uc3QgZGVmYXVsdHM6IFJlc3RyaWN0T3B0aW9ucyA9IHtcbiAgcmVzdHJpY3Rpb246IG51bGwsXG4gIGVsZW1lbnRSZWN0OiBudWxsLFxuICBvZmZzZXQ6IG51bGwsXG4gIGVuZE9ubHk6IGZhbHNlLFxuICBlbmFibGVkOiBmYWxzZSxcbn1cblxuY29uc3QgcmVzdHJpY3QgPSB7XG4gIHN0YXJ0LFxuICBzZXQsXG4gIGdldFJlc3RyaWN0aW9uUmVjdCxcbiAgZGVmYXVsdHMsXG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc3RyaWN0XG4iXX0=