import { closest, getElementRect, parentNode } from './domUtils';
import extend from './extend';
import * as is from './is';
export function getStringOptionResult(value, interactable, element) {
    if (value === 'parent') {
        return parentNode(element);
    }
    if (value === 'self') {
        return interactable.getRect(element);
    }
    return closest(element, value);
}
export function resolveRectLike(value, interactable, element, functionArgs) {
    if (is.string(value)) {
        value = getStringOptionResult(value, interactable, element);
    }
    else if (is.func(value)) {
        value = value(...functionArgs);
    }
    if (is.element(value)) {
        value = getElementRect(value);
    }
    return value;
}
export function rectToXY(rect) {
    return rect && {
        x: 'x' in rect ? rect.x : rect.left,
        y: 'y' in rect ? rect.y : rect.top,
    };
}
export function xywhToTlbr(rect) {
    if (rect && !('left' in rect && 'top' in rect)) {
        rect = extend({}, rect);
        rect.left = rect.x || 0;
        rect.top = rect.y || 0;
        rect.right = rect.right || (rect.left + rect.width);
        rect.bottom = rect.bottom || (rect.top + rect.height);
    }
    return rect;
}
export function tlbrToXywh(rect) {
    if (rect && !('x' in rect && 'y' in rect)) {
        rect = extend({}, rect);
        rect.x = rect.left || 0;
        rect.y = rect.top || 0;
        rect.width = rect.width || (rect.right - rect.x);
        rect.height = rect.height || (rect.bottom - rect.y);
    }
    return rect;
}
export default {
    getStringOptionResult,
    resolveRectLike,
    rectToXY,
    xywhToTlbr,
    tlbrToXywh,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQ2hFLE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQTtBQUM3QixPQUFPLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQTtBQUUxQixNQUFNLFVBQVUscUJBQXFCLENBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxPQUFPO0lBQ2pFLElBQUksS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUFFLE9BQU8sVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0tBQUU7SUFFdEQsSUFBSSxLQUFLLEtBQUssTUFBTSxFQUFFO1FBQUUsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0tBQUU7SUFFOUQsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQ2hDLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFtQixLQUFpQyxFQUFFLFlBQWEsRUFBRSxPQUFRLEVBQUUsWUFBZ0I7SUFDNUgsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3BCLEtBQUssR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0tBQzVEO1NBQ0ksSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3ZCLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQTtLQUMvQjtJQUVELElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNyQixLQUFLLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFBO0tBQzlCO0lBRUQsT0FBTyxLQUFzQixDQUFBO0FBQy9CLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFFLElBQUk7SUFDNUIsT0FBUSxJQUFJLElBQUk7UUFDZCxDQUFDLEVBQUUsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUk7UUFDbkMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHO0tBQ25DLENBQUE7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBRSxJQUFJO0lBQzlCLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsRUFBRTtRQUM5QyxJQUFJLEdBQUcsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUV2QixJQUFJLENBQUMsSUFBSSxHQUFLLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3pCLElBQUksQ0FBQyxHQUFHLEdBQU0sSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBSSxJQUFJLENBQUMsS0FBSyxJQUFNLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDdEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7S0FDdkQ7SUFFRCxPQUFPLElBQUksQ0FBQTtBQUNiLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFFLElBQUk7SUFDOUIsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxFQUFFO1FBQ3pDLElBQUksR0FBRyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBRXZCLElBQUksQ0FBQyxDQUFDLEdBQVEsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUE7UUFDNUIsSUFBSSxDQUFDLENBQUMsR0FBUSxJQUFJLENBQUMsR0FBRyxJQUFLLENBQUMsQ0FBQTtRQUM1QixJQUFJLENBQUMsS0FBSyxHQUFJLElBQUksQ0FBQyxLQUFLLElBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNuRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUNwRDtJQUVELE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQztBQUVELGVBQWU7SUFDYixxQkFBcUI7SUFDckIsZUFBZTtJQUNmLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtDQUNYLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjbG9zZXN0LCBnZXRFbGVtZW50UmVjdCwgcGFyZW50Tm9kZSB9IGZyb20gJy4vZG9tVXRpbHMnXG5pbXBvcnQgZXh0ZW5kIGZyb20gJy4vZXh0ZW5kJ1xuaW1wb3J0ICogYXMgaXMgZnJvbSAnLi9pcydcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0cmluZ09wdGlvblJlc3VsdCAodmFsdWUsIGludGVyYWN0YWJsZSwgZWxlbWVudCkge1xuICBpZiAodmFsdWUgPT09ICdwYXJlbnQnKSB7IHJldHVybiBwYXJlbnROb2RlKGVsZW1lbnQpIH1cblxuICBpZiAodmFsdWUgPT09ICdzZWxmJykgeyByZXR1cm4gaW50ZXJhY3RhYmxlLmdldFJlY3QoZWxlbWVudCkgfVxuXG4gIHJldHVybiBjbG9zZXN0KGVsZW1lbnQsIHZhbHVlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVJlY3RMaWtlPFQgZXh0ZW5kcyBhbnlbXT4gKHZhbHVlOiBJbnRlcmFjdC5SZWN0UmVzb2x2YWJsZTxUPiwgaW50ZXJhY3RhYmxlPywgZWxlbWVudD8sIGZ1bmN0aW9uQXJncz86IFQpIHtcbiAgaWYgKGlzLnN0cmluZyh2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IGdldFN0cmluZ09wdGlvblJlc3VsdCh2YWx1ZSwgaW50ZXJhY3RhYmxlLCBlbGVtZW50KVxuICB9XG4gIGVsc2UgaWYgKGlzLmZ1bmModmFsdWUpKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSguLi5mdW5jdGlvbkFyZ3MpXG4gIH1cblxuICBpZiAoaXMuZWxlbWVudCh2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IGdldEVsZW1lbnRSZWN0KHZhbHVlKVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlIGFzIEludGVyYWN0LlJlY3Rcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY3RUb1hZIChyZWN0KSB7XG4gIHJldHVybiAgcmVjdCAmJiB7XG4gICAgeDogJ3gnIGluIHJlY3QgPyByZWN0LnggOiByZWN0LmxlZnQsXG4gICAgeTogJ3knIGluIHJlY3QgPyByZWN0LnkgOiByZWN0LnRvcCxcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24geHl3aFRvVGxiciAocmVjdCkge1xuICBpZiAocmVjdCAmJiAhKCdsZWZ0JyBpbiByZWN0ICYmICd0b3AnIGluIHJlY3QpKSB7XG4gICAgcmVjdCA9IGV4dGVuZCh7fSwgcmVjdClcblxuICAgIHJlY3QubGVmdCAgID0gcmVjdC54IHx8IDBcbiAgICByZWN0LnRvcCAgICA9IHJlY3QueSB8fCAwXG4gICAgcmVjdC5yaWdodCAgPSByZWN0LnJpZ2h0ICAgfHwgKHJlY3QubGVmdCArIHJlY3Qud2lkdGgpXG4gICAgcmVjdC5ib3R0b20gPSByZWN0LmJvdHRvbSAgfHwgKHJlY3QudG9wICsgcmVjdC5oZWlnaHQpXG4gIH1cblxuICByZXR1cm4gcmVjdFxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGxiclRvWHl3aCAocmVjdCkge1xuICBpZiAocmVjdCAmJiAhKCd4JyBpbiByZWN0ICYmICd5JyBpbiByZWN0KSkge1xuICAgIHJlY3QgPSBleHRlbmQoe30sIHJlY3QpXG5cbiAgICByZWN0LnggICAgICA9IHJlY3QubGVmdCB8fCAwXG4gICAgcmVjdC55ICAgICAgPSByZWN0LnRvcCAgfHwgMFxuICAgIHJlY3Qud2lkdGggID0gcmVjdC53aWR0aCAgfHwgKHJlY3QucmlnaHQgIC0gcmVjdC54KVxuICAgIHJlY3QuaGVpZ2h0ID0gcmVjdC5oZWlnaHQgfHwgKHJlY3QuYm90dG9tIC0gcmVjdC55KVxuICB9XG5cbiAgcmV0dXJuIHJlY3Rcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRTdHJpbmdPcHRpb25SZXN1bHQsXG4gIHJlc29sdmVSZWN0TGlrZSxcbiAgcmVjdFRvWFksXG4gIHh5d2hUb1RsYnIsXG4gIHRsYnJUb1h5d2gsXG59XG4iXX0=