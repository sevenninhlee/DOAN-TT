{"remainingRequest":"/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/Jobs/DOAN-TT/client/src/views/authentication/ForgotPassword.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/Jobs/DOAN-TT/client/src/views/authentication/ForgotPassword.vue","mtime":1573548269879},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/babel-loader/lib/index.js","mtime":1571304325577},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js","mtime":1571304326381}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport AuthHeader from './AuthHeader'\nimport Instruction from '../../components/password/Instruction.modal'\n\nimport { authentication } from '../../mixins/authentication'\n\nexport default {\n    name: \"ForgotPassword\",\n    mixins: [authentication],\n    components: {\n        Instruction,\n        AuthHeader\n    },\n    mounted() {\n        // this.onSuccess()\n    },\n    data() {\n        return {\n            form: {\n                email: ''\n            },\n            validator: {\n                email: {\n                    valid: true,\n                    focus: false,\n                    blured: false,\n                    text: 'Please input a valid Email',\n                    error: false,\n                    last: ''\n                },\n            },\n            isRequestFailed: false\n        }\n    },\n    methods: {\n        onRequest() {\n            var vm = this\n\n            if (!vm.validate()) {\n                return\n            }\n\n            localStorage.setItem('forgot-form', JSON.stringify(vm.form))\n\n            vm.createPasswordToken(vm.form)\n                .then(response => {\n                    vm.onSuccess()\n                })\n                .catch(error => {\n                    if (error.response.status == 404) {\n                        var errors = error.response.data.errors\n                        if (errors.email.length > 0) {\n                            vm.validator.email.error = true\n                            vm.validator.email.text = errors.email[0]\n                            vm.validator.email.last = vm.form.email\n                        }\n                    }\n                })\n        },\n        onSuccess() {\n            this.$bvModal.show('modal-instruction')\n        },\n        validate() {\n            var vm = this\n\n            vm.validator.email.blured = true\n\n            if (vm.validEmail(vm.form.email)) {\n                return true\n            } else {\n                return false\n            }\n        },\n        validEmail(email) {\n            var vm = this\n\n            if (email == vm.validator.email.last) {\n                return\n            }\n\n            vm.validator.email.error = false\n            vm.validator.email.last = ''\n\n            var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n            vm.validator.email.valid = re.test(email)\n\n            var isValid = re.test(email)\n            if (isValid) {\n                return true\n            } else {\n                vm.validator.email.valid = false\n                vm.validator.email.text = 'Please input a valid Email'\n                return false\n            }\n        },\n        toLogin() {\n            this.$router.push({ name: 'Login' })\n        }\n    }\n}\n",{"version":3,"sources":["ForgotPassword.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ForgotPassword.vue","sourceRoot":"src/views/authentication","sourcesContent":["<template>\n  <b-container fluid class=\"auth-page reset-password\">\n\n    <instruction></instruction>\n\n    <b-row class=\"container header\">\n      <b-col md=\"12\">\n        \n        <AuthHeader />\n\n      </b-col>\n    </b-row>\n\n    <b-row class=\"auth-form\">\n      <b-col lg=\"5\" md=\"8\" offset-md=\"2\" class=\"wrapper\">\n        <b-form @submit.prevent=\"onRequest\">\n          <h3 class=\"form-title\">{{ $t(\"auth.forgottitle\") }}</h3>\n          <span class=\"form-subtitle text-gray\">{{ $t(\"auth.forgotsubtitle\") }} <b-link href=\"javascript:;\" @click=\"toLogin\" class=\"text-coffee-light link\">{{ $t(\"auth.forgotsubtitle2\") }}</b-link></span>\n          <b-form-group id=\"grpEmail\"\n                        :class=\"{\n                          'form-group-withicon': true,\n                          'form-group-focus': validator.email.focus && !validator.email.error && (!validator.email.blured || validEmail(form.email)),\n                          'form-group-invalid': !validEmail(form.email) && validator.email.blured,\n                          'form-group-valid': validator.email.blured && (validEmail(form.email) && !validator.email.error)\n                        }\">\n            <b-form-input id=\"email\"\n                        :class=\"{\n                          'form-control-coffee': true,\n                          'input-invalid': !validEmail(form.email) && validator.email.blured,\n                          'input-valid': validator.email.blured && (validEmail(form.email) && !validator.email.error)\n                        }\"\n                        @blur=\"validator.email.blured = true, validator.email.focus = false\"\n                        @focus=\"validator.email.focus = true\"\n                        type=\"email\"\n                        v-model=\"form.email\"\n                        :placeholder=\"$t('auth.input.email')\">\n            </b-form-input>\n            <font-awesome-icon icon=\"envelope-open\" />\n            <p class=\"validation-error\" v-if=\"!validEmail(form.email) && validator.email.blured\">{{ validator.email.text }}</p>\n          </b-form-group>\n          <input type=\"submit\" class=\"btn btn-block btn-md btn-coffee\" :value=\"$t('auth.button.submit')\"/>\n        </b-form>\n        <span class=\"text-gray\" style=\"display: block; margin-top: 20px; text-align: center;\">{{ $t(\"auth.forgotdesc\") }}</span>\n      </b-col>\n    </b-row>\n  </b-container>\n</template>\n\n<script>\nimport AuthHeader from './AuthHeader'\nimport Instruction from '../../components/password/Instruction.modal'\n\nimport { authentication } from '../../mixins/authentication'\n\nexport default {\n    name: \"ForgotPassword\",\n    mixins: [authentication],\n    components: {\n        Instruction,\n        AuthHeader\n    },\n    mounted() {\n        // this.onSuccess()\n    },\n    data() {\n        return {\n            form: {\n                email: ''\n            },\n            validator: {\n                email: {\n                    valid: true,\n                    focus: false,\n                    blured: false,\n                    text: 'Please input a valid Email',\n                    error: false,\n                    last: ''\n                },\n            },\n            isRequestFailed: false\n        }\n    },\n    methods: {\n        onRequest() {\n            var vm = this\n\n            if (!vm.validate()) {\n                return\n            }\n\n            localStorage.setItem('forgot-form', JSON.stringify(vm.form))\n\n            vm.createPasswordToken(vm.form)\n                .then(response => {\n                    vm.onSuccess()\n                })\n                .catch(error => {\n                    if (error.response.status == 404) {\n                        var errors = error.response.data.errors\n                        if (errors.email.length > 0) {\n                            vm.validator.email.error = true\n                            vm.validator.email.text = errors.email[0]\n                            vm.validator.email.last = vm.form.email\n                        }\n                    }\n                })\n        },\n        onSuccess() {\n            this.$bvModal.show('modal-instruction')\n        },\n        validate() {\n            var vm = this\n\n            vm.validator.email.blured = true\n\n            if (vm.validEmail(vm.form.email)) {\n                return true\n            } else {\n                return false\n            }\n        },\n        validEmail(email) {\n            var vm = this\n\n            if (email == vm.validator.email.last) {\n                return\n            }\n\n            vm.validator.email.error = false\n            vm.validator.email.last = ''\n\n            var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n            vm.validator.email.valid = re.test(email)\n\n            var isValid = re.test(email)\n            if (isValid) {\n                return true\n            } else {\n                vm.validator.email.valid = false\n                vm.validator.email.text = 'Please input a valid Email'\n                return false\n            }\n        },\n        toLogin() {\n            this.$router.push({ name: 'Login' })\n        }\n    }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n// @import \"./authentication.scss\";\n</style>\n"]}]}