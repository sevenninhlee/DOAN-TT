{"remainingRequest":"/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/Jobs/DOAN-TT/client/src/views/authentication/ResetPassword.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/Jobs/DOAN-TT/client/src/views/authentication/ResetPassword.vue","mtime":1573548269883},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/babel-loader/lib/index.js","mtime":1571304325577},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js","mtime":1571304326381}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport AuthHeader from './AuthHeader'\nimport Invalid from '../../components/password/Invalid.modal'\nimport Error from '../../components/common/Error.modal'\n\nimport { authentication } from '../../mixins/authentication'\n\nexport default {\n    name: \"ResetPassword\",\n    mixins: [authentication],\n    components: {\n        AuthHeader,\n        Invalid\n    },\n    data() {\n        return {\n            form: {\n                email: '',\n                password: '',\n                password_confirmation: '',\n                token: ''\n            },\n            validator: {\n                password: {\n                    valid: true,\n                    focus: false,\n                    blured: false,\n                    text: ''\n                },\n                password_confirmation: {\n                    valid: true,\n                    focus: false,\n                    blured: false,\n                    text: 'Password does not match'\n                }\n            },\n            token: '',\n            isRequestFailed: false,\n            isShowPassword: false,\n            isShowPasswordConfirm: false\n        }\n    },\n    mounted() {\n        this.token = this.$route.params.token\n        this.find()\n    },\n    methods: {\n        find() {\n            var vm = this\n            vm.findPasswordToken({ token: vm.token }) \n                .then(response => {\n                    vm.form.email = response.data.email\n                    vm.form.token = response.data.token\n                })\n                .catch(error => {\n                    vm.onInvaildToken()\n                })\n        },\n        onReset() {\n            var vm = this\n\n            if (!vm.validate()) {\n                return\n            }\n\n            vm.resetPassword(vm.form)\n                .then(response => {\n                    vm.onSuccess()\n                })\n                .catch(error => {\n                    if (error.response.status == 404) {\n                        vm.$store.dispatch(AUTH_ERROR, error.response.data.errors)\n                    } else {\n                        vm.$store.dispatch(AUTH_ERROR, [\"Failed to reset password.\"])\n                    }\n                    vm.$bvModal.show('modal-error')\n                })\n        },\n        onSuccess() {\n            this.toLogin()\n        },\n        onInvaildToken() {\n            this.$bvModal.show('modal-invalidpwdtoken')\n        },\n        onShowPassword() {\n            if (this.isShowPassword) {\n                this.isShowPassword = false\n            } else {\n                this.isShowPassword = true\n            }\n        },\n        onShowPasswordConfirm() {\n            if (this.isShowPasswordConfirm) {\n                this.isShowPasswordConfirm = false\n            } else {\n                this.isShowPasswordConfirm = true\n            }\n        },\n        validate() {\n            var vm = this\n\n            vm.validator.password.blured = true\n            vm.validator.password_confirmation.blured = true\n\n            if (vm.validPassword(vm.form.password) && vm.matchPassword(vm.form.password, vm.form.password_confirmation)) {\n                return true\n            } else {\n                return false\n            }\n        },\n        validPassword(password) {\n            var vm = this\n            if (password.length < 6 || password.length > 12) {\n                vm.validator.password.valid = false\n                vm.validator.password.text = 'Password must be 6 ~ 12 length characters'\n                return false\n            } else if (!(/[a-z]/.test(password))) {\n                vm.validator.password.valid = false\n                vm.validator.password.text = 'Password must contain at least 1 lower case letter'\n                return false\n            } else if (!(/[A-Z]/.test(password))) {\n                vm.validator.password.valid = false\n                vm.validator.password.text = 'Password must contain at least 1 capital letter'\n                return false\n            } else if (!(/[0-9]/.test(password))) {\n                vm.validator.password.valid = false\n                vm.validator.password.text = 'Password must contain at least 1 number'\n                return false\n            } else if (!(/[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/.test(password))) {\n                vm.validator.password.valid = false\n                vm.validator.password.text = 'Password must contain at least 1 special character'\n                return false\n            }\n\n            return true\n        },\n        matchPassword(password, password_confirmation) {\n            var vm = this\n            if (password_confirmation.length < 6 || password_confirmation.length > 12) {\n                vm.validator.password_confirmation.valid = false\n                vm.validator.password_confirmation.text = 'Password must be 6 ~ 12 length characters'\n                return false\n            } else if (!(/[a-z]/.test(password_confirmation))) {\n                vm.validator.password_confirmation.valid = false\n                vm.validator.password_confirmation.text = 'Password must contain at least 1 lower case letter'\n                return false\n            } else if (!(/[A-Z]/.test(password_confirmation))) {\n                vm.validator.password_confirmation.valid = false\n                vm.validator.password_confirmation.text = 'Password must contain at least 1 capital letter'\n                return false\n            } else if (!(/[0-9]/.test(password_confirmation))) {\n                vm.validator.password_confirmation.valid = false\n                vm.validator.password_confirmation.text = 'Password must contain at least 1 number'\n                return false\n            } else if (!(/[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/.test(password_confirmation))) {\n                vm.validator.password_confirmation.valid = false\n                vm.validator.password_confirmation.text = 'Password must contain at least 1 special character'\n                return false\n            } else if (password !== password_confirmation) {\n                vm.validator.password_confirmation.valid = false;\n                vm.validator.password_confirmation.text = \"Password doesn't match\"\n                return false\n            }\n\n            return true\n        },\n        toLogin() {\n            this.$router.push({ name: 'Login' })\n        }\n    }\n}\n",{"version":3,"sources":["ResetPassword.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ResetPassword.vue","sourceRoot":"src/views/authentication","sourcesContent":["<template>\n  <b-container fluid class=\"auth-page reset-password\">\n\n    <invalid></invalid>\n    <error></error>\n\n    <b-row class=\"container header\">\n      <b-col md=\"12\">\n        \n        <AuthHeader />\n\n      </b-col>\n    </b-row>\n\n    <b-row class=\"auth-form\">\n      <b-col lg=\"5\" md=\"8\" offset-md=\"2\" class=\"wrapper\">\n        <b-form @submit.prevent=\"onReset\">\n          <h3 class=\"form-title\">{{ $t(\"auth.resettitle\") }}</h3>\n          <span class=\"form-subtitle text-gray\">{{ $t(\"auth.forgotsubtitle\") }} <b-link href=\"javascript:;\" @click=\"toLogin\" class=\"text-coffee-light link\">{{ $t(\"auth.forgotsubtitle2\") }}</b-link></span>\n          <b-form-group id=\"grpPassword\"\n                        :class=\"{\n                          'form-group-withicon': true,\n                          'form-group-focus': validator.password.focus && (!validator.password.blured || validPassword(form.password)),\n                          'form-group-password': true,\n                          'form-group-invalid': validator.password.blured && !validPassword(form.password),\n                          'form-group-valid': validator.password.blured && validPassword(form.password)\n                        }\">\n            <b-form-input id=\"password\"\n                        :class=\"{\n                          'form-control-coffee': true,\n                          'password': true,\n                          'input-valid': validator.password.blured && (validPassword(form.password)),\n                          'input-invalid': !validPassword(form.password) && validator.password.blured\n                        }\"\n                        @blur=\"validator.password.blured = true, validator.password.focus = false\"\n                        @focus=\"validator.password.focus = true\"\n                        :type=\"isShowPassword?'text':'password'\"\n                        v-model=\"form.password\"\n                        :placeholder=\"$t('auth.input.password')\">\n            </b-form-input>\n            <div class=\"eye\" href=\"javascript:;\" @click=\"onShowPassword\"><font-awesome-icon icon=\"eye-slash\" v-if=\"isShowPassword\" /><font-awesome-icon icon=\"eye\" v-else /></div>\n              <font-awesome-icon icon=\"lock\" />\n            <p class=\"validation-error\" v-if=\"!validPassword(form.password) && validator.password.blured\">{{ validator.password.text }}</p>\n          </b-form-group>\n          <b-form-group id=\"grpPasswordConfirmation\"\n                        :class=\"{\n                          'form-group-withicon': true,\n                          'form-group-focus': validator.password_confirmation.focus && (!validator.password_confirmation.blured || matchPassword(form.password, form.password_confirmation)),\n                          'form-group-password': true,\n                          'form-group-valid': validator.password_confirmation.blured && matchPassword(form.password, form.password_confirmation),\n                          'form-group-invalid': !matchPassword(form.password, form.password_confirmation) && validator.password_confirmation.blured\n                        }\">\n            <b-form-input id=\"password_confirmation\"\n                        :class=\"{\n                          'form-control-coffee': true,\n                          'password': true,\n                          'input-valid': validator.password_confirmation.blured && (matchPassword(form.password, form.password_confirmation)),\n                          'input-invalid': !matchPassword(form.password, form.password_confirmation) && validator.password_confirmation.blured\n                        }\"\n                        @blur=\"validator.password_confirmation.blured = true, validator.password_confirmation.focus = false\"\n                        @focus=\"validator.password_confirmation.focus = true\"\n                        :type=\"isShowPasswordConfirm?'text':'password'\"\n                        v-model=\"form.password_confirmation\"\n                        :placeholder=\"$t('auth.input.confirmpass')\">\n            </b-form-input>\n            <div class=\"eye\" href=\"javascript:;\" @click=\"onShowPasswordConfirm\"><font-awesome-icon icon=\"eye-slash\" v-if=\"isShowPasswordConfirm\" /><font-awesome-icon icon=\"eye\" v-else /></div>\n            <font-awesome-icon icon=\"lock\" />\n            <p class=\"validation-error\" v-if=\"!matchPassword(form.password, form.password_confirmation) && validator.password_confirmation.blured\">{{ validator.password_confirmation.text }}</p>\n            </b-form-group>\n          <input type=\"submit\" class=\"btn btn-block btn-md btn-coffee\" :value=\"$t('auth.button.resetpass')\"/>\n        </b-form>\n      </b-col>\n    </b-row>\n  </b-container>\n</template>\n\n<script>\nimport AuthHeader from './AuthHeader'\nimport Invalid from '../../components/password/Invalid.modal'\nimport Error from '../../components/common/Error.modal'\n\nimport { authentication } from '../../mixins/authentication'\n\nexport default {\n    name: \"ResetPassword\",\n    mixins: [authentication],\n    components: {\n        AuthHeader,\n        Invalid\n    },\n    data() {\n        return {\n            form: {\n                email: '',\n                password: '',\n                password_confirmation: '',\n                token: ''\n            },\n            validator: {\n                password: {\n                    valid: true,\n                    focus: false,\n                    blured: false,\n                    text: ''\n                },\n                password_confirmation: {\n                    valid: true,\n                    focus: false,\n                    blured: false,\n                    text: 'Password does not match'\n                }\n            },\n            token: '',\n            isRequestFailed: false,\n            isShowPassword: false,\n            isShowPasswordConfirm: false\n        }\n    },\n    mounted() {\n        this.token = this.$route.params.token\n        this.find()\n    },\n    methods: {\n        find() {\n            var vm = this\n            vm.findPasswordToken({ token: vm.token }) \n                .then(response => {\n                    vm.form.email = response.data.email\n                    vm.form.token = response.data.token\n                })\n                .catch(error => {\n                    vm.onInvaildToken()\n                })\n        },\n        onReset() {\n            var vm = this\n\n            if (!vm.validate()) {\n                return\n            }\n\n            vm.resetPassword(vm.form)\n                .then(response => {\n                    vm.onSuccess()\n                })\n                .catch(error => {\n                    if (error.response.status == 404) {\n                        vm.$store.dispatch(AUTH_ERROR, error.response.data.errors)\n                    } else {\n                        vm.$store.dispatch(AUTH_ERROR, [\"Failed to reset password.\"])\n                    }\n                    vm.$bvModal.show('modal-error')\n                })\n        },\n        onSuccess() {\n            this.toLogin()\n        },\n        onInvaildToken() {\n            this.$bvModal.show('modal-invalidpwdtoken')\n        },\n        onShowPassword() {\n            if (this.isShowPassword) {\n                this.isShowPassword = false\n            } else {\n                this.isShowPassword = true\n            }\n        },\n        onShowPasswordConfirm() {\n            if (this.isShowPasswordConfirm) {\n                this.isShowPasswordConfirm = false\n            } else {\n                this.isShowPasswordConfirm = true\n            }\n        },\n        validate() {\n            var vm = this\n\n            vm.validator.password.blured = true\n            vm.validator.password_confirmation.blured = true\n\n            if (vm.validPassword(vm.form.password) && vm.matchPassword(vm.form.password, vm.form.password_confirmation)) {\n                return true\n            } else {\n                return false\n            }\n        },\n        validPassword(password) {\n            var vm = this\n            if (password.length < 6 || password.length > 12) {\n                vm.validator.password.valid = false\n                vm.validator.password.text = 'Password must be 6 ~ 12 length characters'\n                return false\n            } else if (!(/[a-z]/.test(password))) {\n                vm.validator.password.valid = false\n                vm.validator.password.text = 'Password must contain at least 1 lower case letter'\n                return false\n            } else if (!(/[A-Z]/.test(password))) {\n                vm.validator.password.valid = false\n                vm.validator.password.text = 'Password must contain at least 1 capital letter'\n                return false\n            } else if (!(/[0-9]/.test(password))) {\n                vm.validator.password.valid = false\n                vm.validator.password.text = 'Password must contain at least 1 number'\n                return false\n            } else if (!(/[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/.test(password))) {\n                vm.validator.password.valid = false\n                vm.validator.password.text = 'Password must contain at least 1 special character'\n                return false\n            }\n\n            return true\n        },\n        matchPassword(password, password_confirmation) {\n            var vm = this\n            if (password_confirmation.length < 6 || password_confirmation.length > 12) {\n                vm.validator.password_confirmation.valid = false\n                vm.validator.password_confirmation.text = 'Password must be 6 ~ 12 length characters'\n                return false\n            } else if (!(/[a-z]/.test(password_confirmation))) {\n                vm.validator.password_confirmation.valid = false\n                vm.validator.password_confirmation.text = 'Password must contain at least 1 lower case letter'\n                return false\n            } else if (!(/[A-Z]/.test(password_confirmation))) {\n                vm.validator.password_confirmation.valid = false\n                vm.validator.password_confirmation.text = 'Password must contain at least 1 capital letter'\n                return false\n            } else if (!(/[0-9]/.test(password_confirmation))) {\n                vm.validator.password_confirmation.valid = false\n                vm.validator.password_confirmation.text = 'Password must contain at least 1 number'\n                return false\n            } else if (!(/[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/.test(password_confirmation))) {\n                vm.validator.password_confirmation.valid = false\n                vm.validator.password_confirmation.text = 'Password must contain at least 1 special character'\n                return false\n            } else if (password !== password_confirmation) {\n                vm.validator.password_confirmation.valid = false;\n                vm.validator.password_confirmation.text = \"Password doesn't match\"\n                return false\n            }\n\n            return true\n        },\n        toLogin() {\n            this.$router.push({ name: 'Login' })\n        }\n    }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n// @import \"./authentication.scss\";\n</style>\n"]}]}