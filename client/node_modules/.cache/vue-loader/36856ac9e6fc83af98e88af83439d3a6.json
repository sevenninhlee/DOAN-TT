{"remainingRequest":"/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/Jobs/DOAN-TT/client/src/views/profile/Account.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/Jobs/DOAN-TT/client/src/views/profile/Account.vue","mtime":1573552029412},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/babel-loader/lib/index.js","mtime":1571304325577},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js","mtime":1571304326381}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Vue from 'vue'\nimport { VueCropper } from 'vue-cropper'\nimport { mapGetters, mapState } from 'vuex'\nimport { HeaderDropdown } from '@coreui/vue'\nimport { \n  CHANGE_IMAGE_REQUEST, \n  GET_USER_INFOR_REQUEST, \n  USER_UPDATE_REQUEST,\n  USER_UPDATE_PASSAUTH_REQUEST,\n  CHECK_CLIENT,\n  AUTH_ERROR, \n  AUTH_LOADING\n} from '../../store/actions.type'\nimport { firstDocuSign } from '../../mixins/firstDocuSign'\nimport UserSelect from '../../components/UserSelect'\nimport UserIcon from '../../components/UserIcon'\nimport { EventBus } from '../../config/event-bus'\nimport store from '../../store/store'\nimport CustomLoader from '../../components/common/CustomLoader'\n\nimport 'cropperjs/dist/cropper.css';\n\nexport default {\n  name: \"Account\",\n  components: {\n    UserIcon,\n    UserSelect,\n    VueCropper,\n    HeaderDropdown,\n    'custom-loader': CustomLoader\n  },\n  mixins: [firstDocuSign],\n  data() {\n    return {\n      form_data: {\n        error_flag: false,\n        first_name: '',\n        last_name: '',\n        purpose: \"Purpose of using\",\n        company_name: '',\n        employee: \"Number of Employees\",\n        title: '',\n        industry: \"Select Industry\",\n        oldPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      },\n      client_form: {\n        first_name: '',\n        last_name: '',\n        company_name: '',\n        account_type: 0,\n        company_size_id: 1,\n        industry_id: 1,\n        department_name: ''\n      },\n      password_form: {\n        password_old: '',\n        password_new: '',\n        password_confirm: ''\n      },\n      employeeSizes : [],\n      purposeSizes : [\n        {\n          value: \"Personnel\",\n          name: \"My Personnel use\"\n        },\n        {\n          value: \"Business\",\n          name: \"My Business\"\n        }\n      ],\n      industrySizes : [],\n\n      validator: {\n        first_name: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Please input a valid First Name',\n          error: false,\n          last: ''\n        },\n        last_name: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Please input a valid Last Name',\n          error: false,\n          last: ''\n        },\n        purpose: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: ''\n        },\n        company_name: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Please input a valid Company Name',\n          error: false,\n          last: ''\n        },\n        employee: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Number of Employee',\n          error: false,\n          last: ''\n        },\n        title: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Please select a valid Department',\n          error: false,\n          last: ''\n        },\n        industry: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Please select a valid Industry',\n          error: false,\n          last: ''\n        },\n        oldPassword: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Please input your current password',\n          error: false,\n        },\n        newPassword: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: ''\n        },\n        confirmPassword: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Password does not match',\n          error: false,\n        },\n        pageLoading: false,\n        nosidebar: false\n      },\n      isOldPassword: false,  \n      isShowPassword: false,\n      isShowPasswordConfirm: false,\n      showOldPwd: false,\n      showNewPwd: false,\n      showNewConfirm: false,\n\n      files: [],\n      imgPreview: false,\n      avatar: './img/avatars/default.png',\n      previews: {},\n      cropped: null,\n      option: {\n        img: this.test && this.test.user && this.test.user.avatar ? this.test.user.avatar :'./img/avatars/default.png',\n        size: 1,\n        full: false,\n        outputType: 'png',\n        canMove: true,\n        fixedBox: false,\n        original: false,\n        canMoveBox: true,\n        autoCrop: true,\n        autoCropWidth: 200,\n        autoCropHeight: 150,\n        centerBox: false,\n        high: true\n      },\n      fixed: true,\n      fixedNumber: [1, 2],      \n    };\n  },\n  computed: {\n    ...mapGetters(['getUser']),\n    getAvatar() {\n      console.log(\"111111111\", this.getUser.avatar);\n      \n      return this.getUser.avatar || './img/avatars/default.png'\n    },\n    getName() {\n      return (this.getUser.first_name + ' ' + this.getUser.last_name) || 'New User'\n    },\n    getEmail() {\n      return this.getUser.email\n    }\n  },\n  created() {\n    store.dispatch(GET_USER_INFOR_REQUEST)\n    .then(response => {\n      response.user.avatar ? this.option.img = response.user.avatar : this.option.img;\n    })\n    .catch(error => {\n      console.log(error.response)\n    });\n  },\n  mounted() {\n    this.getAllData()\n    this.getCompanySizesDoc()\n    this.getIndustriesDoc()\n  },\n  methods: {\n    /** User Default */\n    getAllData() {\n      this.form_data.first_name = this.getUser.first_name || ''\n      this.form_data.last_name = this.getUser.last_name || ''\n\n      if (this.getUser.client) {\n        this.client_form.account_type = this.getUser.client.account_type\n        this.form_data.purpose = this.getUser.client.account_type\n        \n        this.form_data.company_name = this.getUser.client.company_name || ''\n        this.form_data.title = this.getUser.client.department_name || ''\n\n        this.client_form.company_size_id = this.getUser.client.company_size_id;\n        this.form_data.employee = this.getUser.client.size_from + '-' + this.getUser.client.size_to;\n\n        this.client_form.industry_id = this.getUser.client.industry_id;\n        this.form_data.industry = this.getUser.client.industry_name;\n      }\n    },\n\n    /** Default Field */\n    getCompanySizesDoc() {\n      var vm = this;\n      vm.getCompanySizes()\n        .then( res => {\n          this.employeeSizes = res.data;\n        })\n        .catch( error => {\n          console.log('error', error);\n        })\n    },\n    getIndustriesDoc() {\n      var vm = this;\n      vm.getIndustries()\n        .then( res => {\n          this.industrySizes = res.data;\n        })\n        .catch( error => {\n          console.log('error', error);\n        })\n    },\n    getDepartmentsDoc() {\n      var vm = this;\n      vm.getDepartments()\n        .then( res => {\n          // this.purposeSizes = res.data;\n        })\n        .catch( error => {\n          console.log('error', error);\n        })\n    },\n    \n    /** Update Avatar */\n    onFileChange(e) {\n      var files = e.target.files || e.dataTransfer.files;\n      if (!files || !files.length) return;\n      var reader = new FileReader();\n      reader.onload = function(e) {\n        this.avatar = e.target.result;\n      }.bind(this);\n      reader.readAsDataURL(files[0]);\n    },\n    uploadImg(e, num) {\n      var file = e.target.files[0]\n      if (!/\\.(gif|jpg|jpeg|png|bmp|GIF|JPG|PNG)$/.test(e.target.value)) {\n        return false\n      }\n      this.imgPreview = true\n      var reader = new FileReader()\n      reader.onload = (e) => {\n        let data\n        if (typeof e.target.result === 'object') {\n          data = window.URL.createObjectURL(new Blob([e.target.result]))\n        } else {\n          data = e.target.result\n        }\n        if (num === 1) {\n          this.option.img = data\n        } else if (num === 2) {\n          this.example2.img = data\n        }\n      }\n      reader.readAsArrayBuffer(file)\n    },   \n    saveAvatar(type) {\n      this.$store.dispatch(AUTH_LOADING, true)\n\n      this.$refs.cropper.getCropData((data) => {\n        store.dispatch(CHANGE_IMAGE_REQUEST, {avatar: data})\n        .then(response => {\n          this.$toast.success({\n            title: \"Avatar Updated\",\n            message: \"User's avatar have updated!\"\n          });\n          this.option.img = response.user.avatar;\n          this.$refs['avatarhead'].src = response.user.avatar;\n          this.$refs['change-avatar-modal'].hide();\n          this.$store.dispatch(AUTH_LOADING, false)\n          this.$router.push({ name: 'LandingPage' })\n        })\n        .catch(error => {\n          this.$store.dispatch(AUTH_LOADING, false)\n          this.$toast.error({\n            title: \"Error!\",\n            message: error.response.data\n          });\n          console.log(error) \n        });\n      })\n    },\n    changeAvatarImg() {\n      this.$refs.avatar_file.click();\n    },\n    changeAvatar() {\n      this.nosidebar = true\n      this.$refs['change-avatar-modal'].show();\n    },\n    cancelAvatar() {\n      this.$refs['change-avatar-modal'].hide();\n      this.nosidebar = false\n    },\n    rotateLeft() {\n      this.$refs.cropper.rotateLeft()\n    },\n    rotateRight() {\n      this.$refs.cropper.rotateRight()\n    },  \n    rotate(rotationAngle) {\n      this.$refs['cropper'].rotate(rotationAngle);\n    },\n    imgLoad(msg) {\n      console.log(msg)\n    }, \n    realTime(data) {\n      this.previews = data\n    },\n\n    /** Update Password */\n    savePassword() {\n      var vm = this\n      \n      vm.form_data.error_flag = true;\n\n      if (!vm.validate()) {\n        return\n      }\n\n      vm.$store.dispatch(AUTH_LOADING, true)\n\n      vm.password_form.password_old = vm.form_data.oldPassword\n      vm.password_form.password_new = vm.form_data.newPassword\n      vm.password_form.password_confirm = vm.form_data.confirmPassword\n\n      vm.$store.dispatch(USER_UPDATE_PASSAUTH_REQUEST, vm.password_form)\n        .then(response => {\n          // Success\n          vm.$store.dispatch(AUTH_LOADING, false)\n          vm.clearPassForm()\n          \n          vm.$toast.success({\n            title: \"Password Changed\",\n            message: \"User's password have changed!\"\n          });\n          // console.log(response.data)\n        })\n        .catch(error => {\n          vm.$store.dispatch(AUTH_LOADING, false)\n          vm.clearPassForm()\n\n          if (error.response.status == 422) {\n            vm.$store.dispatch(AUTH_ERROR, error.response.data.errors)\n          } else if (error.response.status == 401) {\n            var errors = error.response.data.errors\n            if (errors.password) {\n              vm.validator.oldPassword.error = true\n              vm.validator.oldPassword.text = errors.password[0]\n            }            \n            vm.$toast.error({\n              title: \"Error!\",\n              message: error.response.data.errors.password[0]\n            });\n            return\n          }\n\n          vm.$store.dispatch(AUTH_ERROR, ['Error occured while login.'])\n          vm.$bvModal.show('modal-error')\n        })\n      this.$refs['change-password-modal'].hide()\n    },\n    changePassword() {\n      this.$refs['change-password-modal'].show()\n    },\n    cancelChange() {\n      this.$refs['change-password-modal'].hide()\n    },\n\n    /** Update Profile */\n    updateProfile() {\n      var vm = this\n      vm.form_data.error_flag = true;\n      if (vm.isError(vm.form_data.first_name)) return;\n      if (vm.isError(vm.form_data.last_name)) return;\n\n      if(vm.form_data.purpose != \"Purpose of using\"){\n        if (vm.form_data.industry === 'My Personnel use' && (vm.isError(vm.form_data.title) || vm.isError(vm.form_data.last_name) || vm.form_data.industry === 'Select Industry' || vm.form_data.employee == 'Employee')) return;\n        \n        vm.$store.dispatch(AUTH_LOADING, true)\n\n        vm.client_form.id = this.$store.state.authentication.user.id\n        vm.client_form.first_name = vm.form_data.first_name;\n        vm.client_form.last_name = vm.form_data.last_name;\n        vm.client_form.company_name = vm.form_data.company_name;\n        vm.client_form.department_name = vm.form_data.title;\n\n        console.log(vm.client_form)\n\n        vm.$store.dispatch(USER_UPDATE_REQUEST, vm.client_form)\n          .then(response => {\n            // Success\n            vm.$store.dispatch(AUTH_LOADING, false)\n            this.$toast.success({\n              title: \"Profile Updated\",\n              message: \"User's info have updated!\"\n            });\n          })\n          .catch(error => {\n            vm.$store.dispatch(AUTH_LOADING, false)            \n            this.$toast.error({\n              title: \"Error!\",\n              message: error.response.data\n            });\n            console.log(error.response)\n          })\n      }\n    },\n\n    /** Utils */\n    changePurposeValue(key, value) {\n      this.client_form.account_type = key;\n      this.form_data.purpose = value;\n    },\n    changeIndustryValue(key, value) {\n      this.client_form.industry_id = key;\n      this.form_data.industry = value;\n    },\n    changeEmployeeValue(key, value) {\n      this.client_form.company_size_id = key;\n      this.form_data.employee = value;\n    },\n    clearPassForm() {\n      var vm = this\n      vm.form_data.oldPassword = ''\n      vm.form_data.newPassword = ''\n      vm.form_data.confirmPassword = ''\n\n      vm.password_form.password_old = ''\n      vm.password_form.password_new = ''\n      vm.password_form.password_confirm = ''\n\n      vm.validator.oldPassword.error = false\n      vm.validator.oldPassword.text = ''\n      vm.validator.newPassword.error = false\n      vm.validator.newPassword.text = ''\n      vm.validator.confirmPassword.error = false\n      vm.validator.confirmPassword.text = ''\n    },\n\n    /** Error Handling */\n    validate() {\n      var vm = this\n      \n      vm.validator.oldPassword.blured = true\n      vm.validator.newPassword.blured = true\n      vm.validator.confirmPassword.blured = true\n\n      if (vm.validOldPassword(vm.form_data.oldPassword) && vm.validNewPassword(vm.form_data.newPassword) && vm.matchPassword(vm.form_data.newPassword, vm.form_data.confirmPassword)) {\n        return true\n      } else {\n        return false\n      }\n    },\n    validOldPassword(oldPassword) {\n      var vm = this\n      if (oldPassword.length < 6 || oldPassword.length > 12) {\n        vm.validator.oldPassword.valid = false\n        vm.validator.oldPassword.text = 'Password must be 6 ~ 12 length characters'\n        return false\n      } else if (!(/[a-z]/.test(oldPassword))) {\n        vm.validator.oldPassword.valid = false\n        vm.validator.oldPassword.text = 'Password must contain at least 1 lower case letter'\n        return false\n      } else if (!(/[A-Z]/.test(oldPassword))) {\n        vm.validator.oldPassword.valid = false\n        vm.validator.oldPassword.text = 'Password must contain at least 1 capital letter'\n        return false\n      } else if (!(/[0-9]/.test(oldPassword))) {\n        vm.validator.oldPassword.valid = false\n        vm.validator.oldPassword.text = 'Password must contain at least 1 number'\n        return false\n      } else if (!(/[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/.test(oldPassword))) {\n        vm.validator.oldPassword.valid = false\n        vm.validator.oldPassword.text = 'Password must contain at least 1 special character'\n        return false\n      }\n\n      return true\n    },\n    validNewPassword(newPassword) {\n      var vm = this\n      if (newPassword.length < 6 || newPassword.length > 12) {\n        vm.validator.newPassword.valid = false\n        vm.validator.newPassword.text = 'Password must be 6 ~ 12 length characters'\n        return false\n      } else if (!(/[a-z]/.test(newPassword))) {\n        vm.validator.newPassword.valid = false\n        vm.validator.newPassword.text = 'Password must contain at least 1 lower case letter'\n        return false\n      } else if (!(/[A-Z]/.test(newPassword))) {\n        vm.validator.newPassword.valid = false\n        vm.validator.newPassword.text = 'Password must contain at least 1 capital letter'\n        return false\n      } else if (!(/[0-9]/.test(newPassword))) {\n        vm.validator.newPassword.valid = false\n        vm.validator.newPassword.text = 'Password must contain at least 1 number'\n        return false\n      } else if (!(/[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/.test(newPassword))) {\n        vm.validator.newPassword.valid = false\n        vm.validator.newPassword.text = 'Password must contain at least 1 special character'\n        return false\n      }\n\n      return true\n    },\n    matchPassword(newPassword, confirmPassword) {\n      var vm = this\n      if (confirmPassword.length < 6 || confirmPassword.length > 12) {\n        vm.validator.confirmPassword.valid = false\n        vm.validator.confirmPassword.text = 'Password must be 6 ~ 12 length characters'\n        return false\n      } else if (!(/[a-z]/.test(confirmPassword))) {\n        vm.validator.confirmPassword.valid = false\n        vm.validator.confirmPassword.text = 'Password must contain at least 1 lower case letter'\n        return false\n      } else if (!(/[A-Z]/.test(confirmPassword))) {\n        vm.validator.confirmPassword.valid = false\n        vm.validator.confirmPassword.text = 'Password must contain at least 1 capital letter'\n        return false\n      } else if (!(/[0-9]/.test(confirmPassword))) {\n        vm.validator.confirmPassword.valid = false\n        vm.validator.confirmPassword.text = 'Password must contain at least 1 number'\n        return false\n      } else if (!(/[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/.test(confirmPassword))) {\n        vm.validator.confirmPassword.valid = false\n        vm.validator.confirmPassword.text = 'Password must contain at least 1 special character'\n        return false\n      } else if (newPassword !== confirmPassword) {\n        vm.validator.confirmPassword.valid = false;\n        vm.validator.confirmPassword.text = \"Password doesn't match\"\n        return false\n      }\n\n      return true\n    },\n    isError(value) {\n      return (\n        this.form_data.error_flag &&\n        (value === undefined ||\n          value === null ||\n          (typeof value === \"object\" && Object.keys(value).length === 0) ||\n          (typeof value === \"string\" && value.trim().length === 0))\n      );\n    },\n     errorAvatar() {\n      this.$refs['avatarhead'].src = './img/avatars/default.png'\n    }\n  }\n};\n",{"version":3,"sources":["Account.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"Account.vue","sourceRoot":"src/views/profile","sourcesContent":["<template>\n  <div class=\"app flex-row\" ref=\"fileform\">\n\n    <custom-loader :own-loading=\"validator.pageLoading\" :no-sidebar=\"validator.nosidebar\"></custom-loader>\n\n    <div class=\"w-100\" id=\"account\">\n      <h1>{{ $t(\"profile.account.title\") }}</h1>\n      <hr class=\"mb-4\" />\n      <div class=\"profile-header content-card\">\n        <div class=\"user-happy\">\n          <div class=\"avatar-tag\">\n            <div class=\"change-avatar\" v-on:click=\"changeAvatar\">Change</div>\n            <img :src=\"getAvatar\" ref=\"avatarhead\" :alt=\"getUser.email\" style=\"min-width: 150px; width: 100%; height: auto\" @error=\"errorAvatar\" />\n          </div>\n          <div class=\"ml-3\">\n            <div class=\"user-name\">{{ getName }}</div>\n            <span class=\"comments\">{{ getEmail }}</span>\n            <div>\n              <b-button variant=\"link\" class=\"p-0 mt-3\" v-on:click=\"changePassword\">{{ $t(\"profile.account.password\") }}</b-button>\n            </div>\n          </div>\n        </div>\n        <div class=\"user-connection\" hidden>\n          <div class=\"connect-social\">{{ $t(\"profile.account.networks\") }}</div>\n          <div class=\"socials\">\n            <b-button variant=\"link\" class=\"p-0\">\n              <UserIcon icon=\"fb.svg\" class=\"mr-1 mr-sm-3 social-link\" />\n            </b-button>\n            <b-button variant=\"link\" class=\"p-0\">\n              <UserIcon icon=\"g_plus.svg\" class=\"mr-1 mr-sm-3 social-link\" />\n            </b-button>\n            <b-button variant=\"link\" class=\"p-0\">\n              <UserIcon icon=\"line_disabled.svg\" class=\"mr-1 mr-sm-3 social-link\" />\n            </b-button>\n            <b-button variant=\"link\" class=\"p-0\">\n              <UserIcon icon=\"talk_disabled.svg\" class=\"social-link\" />\n            </b-button>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"content-card\">\n            <div class=\"content-header\">\n              <strong>{{ $t(\"profile.account.header\") }}</strong>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-sm-6\">\n                <div class=\"form-group\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"first_name\"\n                    :placeholder=\"$t('profile.account.placeholder.firstname')\"\n                    name=\"first_name\"\n                    v-bind:class=\"{'input-error': isError(form_data.first_name)}\"\n                    v-model=\"form_data.first_name\"\n                  />\n                  <div\n                    v-if=\"isError(form_data.first_name)\"\n                    class=\"error-text\"\n                  >{{ $t('profile.account.error.first') }}</div>\n                </div>\n              </div>\n              <div class=\"col-sm-6\">\n                <div class=\"form-group\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"last_name\"\n                    :placeholder=\"$t('profile.account.placeholder.lastname')\"\n                    name=\"last_name\"\n                    v-bind:class=\"{'input-error': isError(form_data.last_name)}\"\n                    v-model=\"form_data.last_name\"\n                  />\n                  <div v-if=\"isError(form_data.last_name)\" class=\"error-text\">{{ $t('profile.account.error.last') }}</div>\n                </div>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <template>\n                <ul class=\"user-custom-select\" \n                    v-bind:class=\"{'input-error': form_data.purpose == 'Purpose of using' && form_data.error_flag}\">\n                  <HeaderDropdown>\n                    <template slot=\"header\">\n                      <div style=\"width:100%; overflow:hidden;\">{{form_data.purpose}}</div>\n                    </template>\n                    <template slot=\"dropdown\" >\n                      <b-dropdown-item v-on:click=\"changePurposeValue('', 'Purpose of using')\">{{ $t('profile.account.placeholder.purpose') }}</b-dropdown-item>\n                      <b-dropdown-item\n                        v-for=\"(purp, index) in purposeSizes\"\n                        :key=\"index\"\n                        :value=\"purp.value ? purp.value : ''\"\n                        @click=\"changePurposeValue(purp.value, purp.name)\"\n                      >{{purp.name}}</b-dropdown-item>\n                    </template>\n                  </HeaderDropdown>\n                </ul>\n                <div v-if=\"form_data.purpose == 'Purpose of using' && form_data.error_flag\" class=\"error-text\">{{ $t(\"profile.account.error.purpose\") }}</div>\n              </template>\n            </div>\n            <div class=\"row\" v-if=\"form_data.purpose != 'My Personnel use'\">\n              <div class=\"col-sm-6\">\n                <div class=\"form-group\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"company_name\"\n                    :placeholder=\"$t('profile.account.placeholder.company')\"\n                    name=\"company_name\"\n                    v-model=\"form_data.company_name\"\n                    v-bind:class=\"{'input-error': form_data.purpose == 'My Business' && form_data.error_flag && isError(form_data.company_name)}\"\n                  />\n                  <div v-if=\"form_data.purpose == 'My Business' && form_data.error_flag && isError(form_data.company_name)\" class=\"error-text\">{{ $t(\"profile.account.error.company\") }}</div>\n                </div>\n              </div>\n              <div class=\"col-sm-6\">\n                <template>\n                  <ul class=\"user-custom-select\"\n                      v-bind:class=\"{'input-error': form_data.purpose == 'My Business' && form_data.employee == 'Employee' && form_data.error_flag}\">\n                    <HeaderDropdown>\n                      <template slot=\"header\">\n                        <div style=\"width:100%; overflow:hidden;\">{{form_data.employee}}</div>\n                      </template>\n                      <template slot=\"dropdown\">\n                        <b-dropdown-item v-on:click=\"changeEmployeeValue('', 'Employee')\">{{ $t('profile.account.placeholder.employee') }}</b-dropdown-item>\n                        <b-dropdown-item\n                          v-for=\"(emp, index) in employeeSizes\"\n                          :key=\"index\"\n                          :value=\"emp.id ? emp.id : ''\"\n                          v-on:click=\"changeEmployeeValue(emp.id, emp.size)\"\n                        >{{emp.size == '1001-3000' ? 'More than 1000' : emp.size}}</b-dropdown-item>\n                      </template>\n                    </HeaderDropdown>\n                  </ul>\n                  <div v-if=\"form_data.purpose == 'My Business' && form_data.employee == 'Employee' && form_data.error_flag\" class=\"error-text\">{{ $t('profile.account.error.employee') }}</div>\n                </template>\n              </div>\n            </div>\n            <div class=\"row\" v-if=\"form_data.purpose != 'My Personnel use'\">\n              <div class=\"col-sm-6\">\n                <div class=\"form-group\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"department_name\" \n                    :placeholder=\"$t('profile.account.placeholder.job')\"\n                    name=\"department_name\"\n                    v-model=\"form_data.title\"\n                    v-bind:class=\"{'input-error': form_data.purpose == 'My Business' && form_data.error_flag && isError(form_data.title)}\"\n                  />\n                  <div v-if=\"form_data.purpose == 'My Business' && form_data.error_flag && form_data.title == ''\" class=\"error-text\">{{ $t('profile.account.error.job') }}</div>\n                </div>\n              </div>\n              <div class=\"col-sm-6\">\n                <div class=\"form-group\">\n                  <template>\n                    <ul class=\"user-custom-select\"\n                      v-bind:class=\"{'input-error': form_data.purpose == 'My Business' && form_data.industry == 'Select Industry' && form_data.error_flag}\">\n                      <HeaderDropdown>\n                        <template slot=\"header\">\n                          <div style=\"width:100%; overflow:hidden;\">{{form_data.industry}}</div>\n                        </template>\n                        <template slot=\"dropdown\">\n                          <b-dropdown-item v-on:click=\"changeIndustryValue('', 'Select Industry')\">{{ $t('profile.account.placeholder.industry') }}</b-dropdown-item>\n                          <b-dropdown-item\n                            v-for=\"(indus, index) in industrySizes\"\n                            :key=\"index\"\n                            :value=\"indus.id ? indus.id : ''\"\n                            v-on:click=\"changeIndustryValue(indus.id, indus.industry_name)\"\n                          >{{indus.industry_name}}</b-dropdown-item>\n                        </template>\n                      </HeaderDropdown>\n                    </ul>\n                    <div v-if=\"form_data.purpose == 'My Business' && form_data.error_flag && form_data.industry == 'Select Industry'\" class=\"error-text\">{{ $t('profile.account.error.industry') }}</div>\n                  </template>\n                </div>\n              </div>\n            </div>\n            <button v-on:click=\"updateProfile\" class=\"btn btn-primary w-100\">{{ $t('layout.documents.modal.button') }}</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <b-modal id=\"change-password-modal\" ref=\"change-password-modal\"\n       hide-footer centered size=\"xl\">\n      <div class=\"change-password-modal\">\n        <div class=\"text-center\"><img src=\"img/icons/mail password.svg\" /></div>\n        <div class=\"title\">{{ $t(\"profile.account.password\") }}</div>\n        <div class=\"content-card text-left\">\n\n\n          <b-form @submit.prevent=\"savePassword\">\n            <b-row class=\"no-gutters\">\n              <b-form-group id=\"grpPassword\"\n                            :class=\"{\n                              'form-group-withicon': true,\n                              'col-12': true,\n                              'form-group-focus': validator.oldPassword.focus && (!validator.oldPassword.blured || validOldPassword(form_data.oldPassword)),\n                              'form-group-password': true,\n                              'form-group-invalid': validator.oldPassword.blured && !validOldPassword(form_data.oldPassword),\n                              'form-group-valid': validator.oldPassword.blured && validOldPassword(form_data.oldPassword)\n                            }\">\n                <b-form-input id=\"oldPassword\"\n                              :class=\"{\n                                'form-control-coffee': true,\n                                'password': true,\n                                'input-valid': validator.oldPassword.blured && (validOldPassword(form_data.oldPassword)),\n                                'input-invalid': !validOldPassword(form_data.oldPassword) && validator.oldPassword.blured\n                              }\"\n                              @blur=\"validator.oldPassword.blured = true, validator.oldPassword.focus = false\"\n                              @focus=\"validator.oldPassword.focus = true\"\n                              :type=\"showOldPwd?'text':'password'\"\n                              v-model=\"form_data.oldPassword\"\n                              :placeholder=\"$t('auth.input.password')\">\n                </b-form-input>\n                <div class=\"eye\" href=\"javascript:;\" @click=\"showOldPwd = !showOldPwd\"><font-awesome-icon icon=\"eye-slash\" v-if=\"showOldPwd\" /><font-awesome-icon icon=\"eye\" v-else /></div>\n                <font-awesome-icon icon=\"lock\" />\n                <p class=\"validation-error\" v-if=\"(!validOldPassword(form_data.oldPassword) || validator.oldPassword.error) && validator.oldPassword.blured\">{{ validator.oldPassword.text }}</p>\n              </b-form-group>\n              <b-form-group id=\"grpNewPassword\"\n                            :class=\"{\n                              'form-group-withicon': true,\n                              'col-12': true,\n                              'form-group-focus': validator.newPassword.focus && (!validator.newPassword.blured || validOldPassword(form_data.newPassword)),\n                              'form-group-password': true,\n                              'form-group-invalid': validator.newPassword.blured && !validOldPassword(form_data.newPassword),\n                              'form-group-valid': validator.newPassword.blured && validOldPassword(form_data.newPassword)\n                            }\">\n                <b-form-input id=\"newPassword\"\n                              :class=\"{\n                                'form-control-coffee': true,\n                                'password': true,\n                                'input-valid': validator.newPassword.blured && (validNewPassword(form_data.newPassword)),\n                                'input-invalid': !validNewPassword(form_data.newPassword) && validator.newPassword.blured\n                              }\"\n                              @blur=\"validator.newPassword.blured = true, validator.newPassword.focus = false\"\n                              @focus=\"validator.newPassword.focus = true\"\n                              :type=\"showNewPwd?'text':'password'\"\n                              v-model=\"form_data.newPassword\"\n                              :placeholder=\"$t('profile.account.placeholder.new')\">\n                </b-form-input>\n                <div class=\"eye\" href=\"javascript:;\" @click=\"showNewPwd = !showNewPwd\"><font-awesome-icon icon=\"eye-slash\" v-if=\"showNewPwd\" /><font-awesome-icon icon=\"eye\" v-else /></div>\n                <font-awesome-icon icon=\"lock\" />\n                <p class=\"validation-error\" v-if=\"(!validNewPassword(form_data.newPassword) || validator.newPassword.error) && validator.newPassword.blured\">{{ validator.newPassword.text }}</p>\n              </b-form-group>\n              <b-form-group id=\"grpConfirmPassword\"\n                            :class=\"{\n                              'form-group-withicon': true,\n                              'col-12': true,\n                              'form-group-focus': validator.confirmPassword.focus && (!validator.confirmPassword.blured || matchPassword(form_data.newPassword, form_data.confirmPassword)),\n                              'form-group-password': true,\n                              'form-group-invalid': validator.confirmPassword.blured && !matchPassword(form_data.newPassword, form_data.confirmPassword),\n                              'form-group-valid': validator.confirmPassword.blured && matchPassword(form_data.newPassword, form_data.confirmPassword)\n                            }\">\n                <b-form-input id=\"confirmPassword\"\n                              :class=\"{\n                                'form-control-coffee': true,\n                                'password': true,\n                                'input-valid': validator.confirmPassword.blured && (matchPassword(form_data.newPassword, form_data.confirmPassword)),\n                                'input-invalid': !matchPassword(form_data.newPassword, form_data.confirmPassword) && validator.confirmPassword.blured\n                              }\"\n                              @blur=\"validator.confirmPassword.blured = true, validator.confirmPassword.focus = false\"\n                              @focus=\"validator.confirmPassword.focus = true\"\n                              :type=\"showNewConfirm?'text':'password'\"\n                              v-model=\"form_data.confirmPassword\"\n                              :placeholder=\"$t('profile.account.placeholder.confirm')\">\n                </b-form-input>\n                <div class=\"eye\" href=\"javascript:;\" @click=\"showNewConfirm = !showNewConfirm\"><font-awesome-icon icon=\"eye-slash\" v-if=\"showNewConfirm\" /><font-awesome-icon icon=\"eye\" v-else /></div>\n                <font-awesome-icon icon=\"lock\" />\n                <p class=\"validation-error\" v-if=\"(!matchPassword(form_data.newPassword, form_data.confirmPassword) || validator.confirmPassword.error) && validator.confirmPassword.blured\">{{ validator.confirmPassword.text }}</p>\n              </b-form-group>\n            </b-row>\n\n            <div class=\"text-center\">\n              <b-button variant=\"outline-primary\" class=\"mr-3\" v-on:click=\"cancelChange\" >{{ $t(\"profile.account.cancel\") }}</b-button>\n              <button type=\"submit\" class=\"btn btn-primary\">{{ $t(\"profile.account.save\") }}</button>\n            </div>\n          </b-form>\n        </div>\n      </div>\n    </b-modal>\n    \n    <b-modal id=\"change-avatar-modal\" ref=\"change-avatar-modal\" hide-footer centered size=\"xl\">\n      <div class=\"change-avatar-modal\">\n        <div class=\"title\">{{ $t(\"profile.account.avatar\") }}</div>\n\n        <div class=\"img-control-btns\">\n           <input \n            type=\"file\" \n            ref=\"avatar_file\"\n            style=\"display: none\"  \n            @change=\"uploadImg($event, 1)\" />\n          <b-button variant=\"outline-primary\" v-on:click=\"changeAvatarImg\">{{ $t(\"profile.account.otheravatar\") }}</b-button>\n          <div>\n            <i class=\"fa fa-rotate-left clickable-icon\" v-on:click=\"rotateLeft\"/>\n            <i class=\"fa fa-rotate-right clickable-icon mx-3\" v-on:click=\"rotateRight\"/>\n          </div>\n        </div>\n        \n        <div class=\"cut\">\n          <vue-cropper v-if=\"imgPreview\"\n            ref=\"cropper\" \n            :img=\"option.img\" \n            :src=\"avatar\"\n            :output-size=\"option.size\" \n            :output-type=\"option.outputType\" \n            :info=\"true\" :full=\"option.full\" \n            :fixed=\"fixed\"\n            :can-move=\"option.canMove\" \n            :can-move-box=\"option.canMoveBox\" \n            :fixed-box=\"option.fixedBox\" \n            :original=\"option.original\"\n            :auto-crop=\"option.autoCrop\" \n            :auto-crop-width=\"option.autoCropWidth\" \n            :auto-crop-height=\"option.autoCropHeight\" \n            :center-box=\"option.centerBox\"\n            @real-time=\"realTime\" :high=\"option.high\"\n            @img-load=\"imgLoad\" mode=\"cover\"\n          ></vue-cropper>\n\n          <p class=\"title\" style=\"font-size: 20px !important\" v-else>{{ $t('profile.account.otheravatarsubtitle') }}</p>\n        </div>\n\n        <div class=\"text-center\">\n          <b-button variant=\"outline-primary\" class=\"mr-3\" v-on:click=\"cancelAvatar\" >{{ $t(\"profile.account.cancel\") }}</b-button>\n          <button type=\"submit\" class=\"btn btn-primary\" v-on:click=\"saveAvatar\">{{ $t(\"profile.account.save\") }}</button>\n        </div>\n      </div>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport { VueCropper } from 'vue-cropper'\nimport { mapGetters, mapState } from 'vuex'\nimport { HeaderDropdown } from '@coreui/vue'\nimport { \n  CHANGE_IMAGE_REQUEST, \n  GET_USER_INFOR_REQUEST, \n  USER_UPDATE_REQUEST,\n  USER_UPDATE_PASSAUTH_REQUEST,\n  CHECK_CLIENT,\n  AUTH_ERROR, \n  AUTH_LOADING\n} from '../../store/actions.type'\nimport { firstDocuSign } from '../../mixins/firstDocuSign'\nimport UserSelect from '../../components/UserSelect'\nimport UserIcon from '../../components/UserIcon'\nimport { EventBus } from '../../config/event-bus'\nimport store from '../../store/store'\nimport CustomLoader from '../../components/common/CustomLoader'\n\nimport 'cropperjs/dist/cropper.css';\n\nexport default {\n  name: \"Account\",\n  components: {\n    UserIcon,\n    UserSelect,\n    VueCropper,\n    HeaderDropdown,\n    'custom-loader': CustomLoader\n  },\n  mixins: [firstDocuSign],\n  data() {\n    return {\n      form_data: {\n        error_flag: false,\n        first_name: '',\n        last_name: '',\n        purpose: \"Purpose of using\",\n        company_name: '',\n        employee: \"Number of Employees\",\n        title: '',\n        industry: \"Select Industry\",\n        oldPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      },\n      client_form: {\n        first_name: '',\n        last_name: '',\n        company_name: '',\n        account_type: 0,\n        company_size_id: 1,\n        industry_id: 1,\n        department_name: ''\n      },\n      password_form: {\n        password_old: '',\n        password_new: '',\n        password_confirm: ''\n      },\n      employeeSizes : [],\n      purposeSizes : [\n        {\n          value: \"Personnel\",\n          name: \"My Personnel use\"\n        },\n        {\n          value: \"Business\",\n          name: \"My Business\"\n        }\n      ],\n      industrySizes : [],\n\n      validator: {\n        first_name: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Please input a valid First Name',\n          error: false,\n          last: ''\n        },\n        last_name: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Please input a valid Last Name',\n          error: false,\n          last: ''\n        },\n        purpose: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: ''\n        },\n        company_name: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Please input a valid Company Name',\n          error: false,\n          last: ''\n        },\n        employee: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Number of Employee',\n          error: false,\n          last: ''\n        },\n        title: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Please select a valid Department',\n          error: false,\n          last: ''\n        },\n        industry: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Please select a valid Industry',\n          error: false,\n          last: ''\n        },\n        oldPassword: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Please input your current password',\n          error: false,\n        },\n        newPassword: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: ''\n        },\n        confirmPassword: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Password does not match',\n          error: false,\n        },\n        pageLoading: false,\n        nosidebar: false\n      },\n      isOldPassword: false,  \n      isShowPassword: false,\n      isShowPasswordConfirm: false,\n      showOldPwd: false,\n      showNewPwd: false,\n      showNewConfirm: false,\n\n      files: [],\n      imgPreview: false,\n      avatar: './img/avatars/default.png',\n      previews: {},\n      cropped: null,\n      option: {\n        img: this.test && this.test.user && this.test.user.avatar ? this.test.user.avatar :'./img/avatars/default.png',\n        size: 1,\n        full: false,\n        outputType: 'png',\n        canMove: true,\n        fixedBox: false,\n        original: false,\n        canMoveBox: true,\n        autoCrop: true,\n        autoCropWidth: 200,\n        autoCropHeight: 150,\n        centerBox: false,\n        high: true\n      },\n      fixed: true,\n      fixedNumber: [1, 2],      \n    };\n  },\n  computed: {\n    ...mapGetters(['getUser']),\n    getAvatar() {\n      console.log(\"111111111\", this.getUser.avatar);\n      \n      return this.getUser.avatar || './img/avatars/default.png'\n    },\n    getName() {\n      return (this.getUser.first_name + ' ' + this.getUser.last_name) || 'New User'\n    },\n    getEmail() {\n      return this.getUser.email\n    }\n  },\n  created() {\n    store.dispatch(GET_USER_INFOR_REQUEST)\n    .then(response => {\n      response.user.avatar ? this.option.img = response.user.avatar : this.option.img;\n    })\n    .catch(error => {\n      console.log(error.response)\n    });\n  },\n  mounted() {\n    this.getAllData()\n    this.getCompanySizesDoc()\n    this.getIndustriesDoc()\n  },\n  methods: {\n    /** User Default */\n    getAllData() {\n      this.form_data.first_name = this.getUser.first_name || ''\n      this.form_data.last_name = this.getUser.last_name || ''\n\n      if (this.getUser.client) {\n        this.client_form.account_type = this.getUser.client.account_type\n        this.form_data.purpose = this.getUser.client.account_type\n        \n        this.form_data.company_name = this.getUser.client.company_name || ''\n        this.form_data.title = this.getUser.client.department_name || ''\n\n        this.client_form.company_size_id = this.getUser.client.company_size_id;\n        this.form_data.employee = this.getUser.client.size_from + '-' + this.getUser.client.size_to;\n\n        this.client_form.industry_id = this.getUser.client.industry_id;\n        this.form_data.industry = this.getUser.client.industry_name;\n      }\n    },\n\n    /** Default Field */\n    getCompanySizesDoc() {\n      var vm = this;\n      vm.getCompanySizes()\n        .then( res => {\n          this.employeeSizes = res.data;\n        })\n        .catch( error => {\n          console.log('error', error);\n        })\n    },\n    getIndustriesDoc() {\n      var vm = this;\n      vm.getIndustries()\n        .then( res => {\n          this.industrySizes = res.data;\n        })\n        .catch( error => {\n          console.log('error', error);\n        })\n    },\n    getDepartmentsDoc() {\n      var vm = this;\n      vm.getDepartments()\n        .then( res => {\n          // this.purposeSizes = res.data;\n        })\n        .catch( error => {\n          console.log('error', error);\n        })\n    },\n    \n    /** Update Avatar */\n    onFileChange(e) {\n      var files = e.target.files || e.dataTransfer.files;\n      if (!files || !files.length) return;\n      var reader = new FileReader();\n      reader.onload = function(e) {\n        this.avatar = e.target.result;\n      }.bind(this);\n      reader.readAsDataURL(files[0]);\n    },\n    uploadImg(e, num) {\n      var file = e.target.files[0]\n      if (!/\\.(gif|jpg|jpeg|png|bmp|GIF|JPG|PNG)$/.test(e.target.value)) {\n        return false\n      }\n      this.imgPreview = true\n      var reader = new FileReader()\n      reader.onload = (e) => {\n        let data\n        if (typeof e.target.result === 'object') {\n          data = window.URL.createObjectURL(new Blob([e.target.result]))\n        } else {\n          data = e.target.result\n        }\n        if (num === 1) {\n          this.option.img = data\n        } else if (num === 2) {\n          this.example2.img = data\n        }\n      }\n      reader.readAsArrayBuffer(file)\n    },   \n    saveAvatar(type) {\n      this.$store.dispatch(AUTH_LOADING, true)\n\n      this.$refs.cropper.getCropData((data) => {\n        store.dispatch(CHANGE_IMAGE_REQUEST, {avatar: data})\n        .then(response => {\n          this.$toast.success({\n            title: \"Avatar Updated\",\n            message: \"User's avatar have updated!\"\n          });\n          this.option.img = response.user.avatar;\n          this.$refs['avatarhead'].src = response.user.avatar;\n          this.$refs['change-avatar-modal'].hide();\n          this.$store.dispatch(AUTH_LOADING, false)\n          this.$router.push({ name: 'LandingPage' })\n        })\n        .catch(error => {\n          this.$store.dispatch(AUTH_LOADING, false)\n          this.$toast.error({\n            title: \"Error!\",\n            message: error.response.data\n          });\n          console.log(error) \n        });\n      })\n    },\n    changeAvatarImg() {\n      this.$refs.avatar_file.click();\n    },\n    changeAvatar() {\n      this.nosidebar = true\n      this.$refs['change-avatar-modal'].show();\n    },\n    cancelAvatar() {\n      this.$refs['change-avatar-modal'].hide();\n      this.nosidebar = false\n    },\n    rotateLeft() {\n      this.$refs.cropper.rotateLeft()\n    },\n    rotateRight() {\n      this.$refs.cropper.rotateRight()\n    },  \n    rotate(rotationAngle) {\n      this.$refs['cropper'].rotate(rotationAngle);\n    },\n    imgLoad(msg) {\n      console.log(msg)\n    }, \n    realTime(data) {\n      this.previews = data\n    },\n\n    /** Update Password */\n    savePassword() {\n      var vm = this\n      \n      vm.form_data.error_flag = true;\n\n      if (!vm.validate()) {\n        return\n      }\n\n      vm.$store.dispatch(AUTH_LOADING, true)\n\n      vm.password_form.password_old = vm.form_data.oldPassword\n      vm.password_form.password_new = vm.form_data.newPassword\n      vm.password_form.password_confirm = vm.form_data.confirmPassword\n\n      vm.$store.dispatch(USER_UPDATE_PASSAUTH_REQUEST, vm.password_form)\n        .then(response => {\n          // Success\n          vm.$store.dispatch(AUTH_LOADING, false)\n          vm.clearPassForm()\n          \n          vm.$toast.success({\n            title: \"Password Changed\",\n            message: \"User's password have changed!\"\n          });\n          // console.log(response.data)\n        })\n        .catch(error => {\n          vm.$store.dispatch(AUTH_LOADING, false)\n          vm.clearPassForm()\n\n          if (error.response.status == 422) {\n            vm.$store.dispatch(AUTH_ERROR, error.response.data.errors)\n          } else if (error.response.status == 401) {\n            var errors = error.response.data.errors\n            if (errors.password) {\n              vm.validator.oldPassword.error = true\n              vm.validator.oldPassword.text = errors.password[0]\n            }            \n            vm.$toast.error({\n              title: \"Error!\",\n              message: error.response.data.errors.password[0]\n            });\n            return\n          }\n\n          vm.$store.dispatch(AUTH_ERROR, ['Error occured while login.'])\n          vm.$bvModal.show('modal-error')\n        })\n      this.$refs['change-password-modal'].hide()\n    },\n    changePassword() {\n      this.$refs['change-password-modal'].show()\n    },\n    cancelChange() {\n      this.$refs['change-password-modal'].hide()\n    },\n\n    /** Update Profile */\n    updateProfile() {\n      var vm = this\n      vm.form_data.error_flag = true;\n      if (vm.isError(vm.form_data.first_name)) return;\n      if (vm.isError(vm.form_data.last_name)) return;\n\n      if(vm.form_data.purpose != \"Purpose of using\"){\n        if (vm.form_data.industry === 'My Personnel use' && (vm.isError(vm.form_data.title) || vm.isError(vm.form_data.last_name) || vm.form_data.industry === 'Select Industry' || vm.form_data.employee == 'Employee')) return;\n        \n        vm.$store.dispatch(AUTH_LOADING, true)\n\n        vm.client_form.id = this.$store.state.authentication.user.id\n        vm.client_form.first_name = vm.form_data.first_name;\n        vm.client_form.last_name = vm.form_data.last_name;\n        vm.client_form.company_name = vm.form_data.company_name;\n        vm.client_form.department_name = vm.form_data.title;\n\n        console.log(vm.client_form)\n\n        vm.$store.dispatch(USER_UPDATE_REQUEST, vm.client_form)\n          .then(response => {\n            // Success\n            vm.$store.dispatch(AUTH_LOADING, false)\n            this.$toast.success({\n              title: \"Profile Updated\",\n              message: \"User's info have updated!\"\n            });\n          })\n          .catch(error => {\n            vm.$store.dispatch(AUTH_LOADING, false)            \n            this.$toast.error({\n              title: \"Error!\",\n              message: error.response.data\n            });\n            console.log(error.response)\n          })\n      }\n    },\n\n    /** Utils */\n    changePurposeValue(key, value) {\n      this.client_form.account_type = key;\n      this.form_data.purpose = value;\n    },\n    changeIndustryValue(key, value) {\n      this.client_form.industry_id = key;\n      this.form_data.industry = value;\n    },\n    changeEmployeeValue(key, value) {\n      this.client_form.company_size_id = key;\n      this.form_data.employee = value;\n    },\n    clearPassForm() {\n      var vm = this\n      vm.form_data.oldPassword = ''\n      vm.form_data.newPassword = ''\n      vm.form_data.confirmPassword = ''\n\n      vm.password_form.password_old = ''\n      vm.password_form.password_new = ''\n      vm.password_form.password_confirm = ''\n\n      vm.validator.oldPassword.error = false\n      vm.validator.oldPassword.text = ''\n      vm.validator.newPassword.error = false\n      vm.validator.newPassword.text = ''\n      vm.validator.confirmPassword.error = false\n      vm.validator.confirmPassword.text = ''\n    },\n\n    /** Error Handling */\n    validate() {\n      var vm = this\n      \n      vm.validator.oldPassword.blured = true\n      vm.validator.newPassword.blured = true\n      vm.validator.confirmPassword.blured = true\n\n      if (vm.validOldPassword(vm.form_data.oldPassword) && vm.validNewPassword(vm.form_data.newPassword) && vm.matchPassword(vm.form_data.newPassword, vm.form_data.confirmPassword)) {\n        return true\n      } else {\n        return false\n      }\n    },\n    validOldPassword(oldPassword) {\n      var vm = this\n      if (oldPassword.length < 6 || oldPassword.length > 12) {\n        vm.validator.oldPassword.valid = false\n        vm.validator.oldPassword.text = 'Password must be 6 ~ 12 length characters'\n        return false\n      } else if (!(/[a-z]/.test(oldPassword))) {\n        vm.validator.oldPassword.valid = false\n        vm.validator.oldPassword.text = 'Password must contain at least 1 lower case letter'\n        return false\n      } else if (!(/[A-Z]/.test(oldPassword))) {\n        vm.validator.oldPassword.valid = false\n        vm.validator.oldPassword.text = 'Password must contain at least 1 capital letter'\n        return false\n      } else if (!(/[0-9]/.test(oldPassword))) {\n        vm.validator.oldPassword.valid = false\n        vm.validator.oldPassword.text = 'Password must contain at least 1 number'\n        return false\n      } else if (!(/[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/.test(oldPassword))) {\n        vm.validator.oldPassword.valid = false\n        vm.validator.oldPassword.text = 'Password must contain at least 1 special character'\n        return false\n      }\n\n      return true\n    },\n    validNewPassword(newPassword) {\n      var vm = this\n      if (newPassword.length < 6 || newPassword.length > 12) {\n        vm.validator.newPassword.valid = false\n        vm.validator.newPassword.text = 'Password must be 6 ~ 12 length characters'\n        return false\n      } else if (!(/[a-z]/.test(newPassword))) {\n        vm.validator.newPassword.valid = false\n        vm.validator.newPassword.text = 'Password must contain at least 1 lower case letter'\n        return false\n      } else if (!(/[A-Z]/.test(newPassword))) {\n        vm.validator.newPassword.valid = false\n        vm.validator.newPassword.text = 'Password must contain at least 1 capital letter'\n        return false\n      } else if (!(/[0-9]/.test(newPassword))) {\n        vm.validator.newPassword.valid = false\n        vm.validator.newPassword.text = 'Password must contain at least 1 number'\n        return false\n      } else if (!(/[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/.test(newPassword))) {\n        vm.validator.newPassword.valid = false\n        vm.validator.newPassword.text = 'Password must contain at least 1 special character'\n        return false\n      }\n\n      return true\n    },\n    matchPassword(newPassword, confirmPassword) {\n      var vm = this\n      if (confirmPassword.length < 6 || confirmPassword.length > 12) {\n        vm.validator.confirmPassword.valid = false\n        vm.validator.confirmPassword.text = 'Password must be 6 ~ 12 length characters'\n        return false\n      } else if (!(/[a-z]/.test(confirmPassword))) {\n        vm.validator.confirmPassword.valid = false\n        vm.validator.confirmPassword.text = 'Password must contain at least 1 lower case letter'\n        return false\n      } else if (!(/[A-Z]/.test(confirmPassword))) {\n        vm.validator.confirmPassword.valid = false\n        vm.validator.confirmPassword.text = 'Password must contain at least 1 capital letter'\n        return false\n      } else if (!(/[0-9]/.test(confirmPassword))) {\n        vm.validator.confirmPassword.valid = false\n        vm.validator.confirmPassword.text = 'Password must contain at least 1 number'\n        return false\n      } else if (!(/[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/.test(confirmPassword))) {\n        vm.validator.confirmPassword.valid = false\n        vm.validator.confirmPassword.text = 'Password must contain at least 1 special character'\n        return false\n      } else if (newPassword !== confirmPassword) {\n        vm.validator.confirmPassword.valid = false;\n        vm.validator.confirmPassword.text = \"Password doesn't match\"\n        return false\n      }\n\n      return true\n    },\n    isError(value) {\n      return (\n        this.form_data.error_flag &&\n        (value === undefined ||\n          value === null ||\n          (typeof value === \"object\" && Object.keys(value).length === 0) ||\n          (typeof value === \"string\" && value.trim().length === 0))\n      );\n    },\n     errorAvatar() {\n      this.$refs['avatarhead'].src = './img/avatars/default.png'\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\">\n@import \"./Account.scss\";\n</style>\n\n"]}]}