{"remainingRequest":"/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/Jobs/DOAN-TT/client/src/views/signaturestamp/StampSeals.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/var/www/html/Jobs/DOAN-TT/client/src/views/signaturestamp/StampSeals.vue","mtime":1573548269983},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/css-loader/index.js","mtime":1571304325802},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1571304326381},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/sass-loader/dist/cjs.js","mtime":1571304338110},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js","mtime":1571304326381}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.scroll-box {\n  max-height: 350px;\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n",{"version":3,"sources":["StampSeals.vue"],"names":[],"mappingsi1BA;AACA;AACA;AACA;AACA","file":"StampSeals.vue","sourceRoot":"src/views/signaturestamp","sourcesContent":["<template>\n  <div class=\"px-sm-1 px-2\">\n    <!-- HEADER -->\n    <div class=\"row px-1\">\n      <div class=\"col-12 px-1\">\n        <div class=\"content-card\">\n          <div class=\"content\">\n            <div class=\"d-flex align-items-center\">\n              <img src=\"img/icons/stamp.svg\" />\n              <div class=\"ml-3\">\n                <div class=\"header\">{{ $t(\"signature.headerStamp\") }}</div>\n                <div class=\"comments\">{{ $t('signature.commentStamp') }}</div>\n              </div>\n            </div>\n            <b-button variant=\"primary\" v-on:click=\"showStampModal\">{{ $t('signature.button.addStamp') }}</b-button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- END HEADER -->\n\n    <!-- LISTING STAMPS -->\n    <div class=\"row px-1\">\n      <div class=\"col-sm px-1\" v-for=\"stamp in STAMPS\" :key=\"stamp.id\">\n        <div class=\"stamp-related\">\n        <div class=\"content-card signatures px-md-3 px-2\">          \n          <!-- List here -->\n          <div class=\"listing-stamp sign-result\" style=\"overflow: hidden;\">\n            <img :src=\"stamp.uploaded_url\" alt=\"Uploaded Image\" style=\"width: auto; height: 120px;\" />\n          </div>\n\n          <!--\n          <Stamp v-else \n            v-bind:key=\"stamp.id\" \n              :keyItem=\"stamp.id\" \n              :paramStamp=\"({\n                stamp_type: stamp.stamp_type,\n                stamp_title: stamp.title,\n                stamp_text: stamp.text,\n                font_face: stamp.font_face,\n                font_size: stamp.font_size,\n                uploaded_url: stamp.uploaded_url,\n                etc: {\n                  position: '',\n                  company: ''\n                }\n              })\"\n              :configStamp=\"({\n                language: stamp.language,\n                str_length: '',\n                display_name: ''\n              })\"\n              :classChecked=\"''\" \n              :btnClickHandler=\"() => { return }\"\n          />\n          -->\n\n          <div class=\"actions\">\n            <div class=\"action clickable-icon\" v-on:click=\"onDefaultStamp(stamp.id)\">\n              <i class=\"fa fa-pencil pr-2\"></i> {{ $t('signature.button.setdefault') }}\n            </div>\n            <div class=\"action clickable-icon\" v-on:click=\"onDownloadStamp(stamp.uploaded_url)\">\n              <i class=\"fa fa-download pr-2\"></i> {{ $t('signature.button.download') }}\n            </div>\n            <div class=\"action clickable-icon\" v-on:click=\"onDeleteStamp(stamp.id)\">\n              <i class=\"fa fa-trash pr-2\"></i> {{ $t('signature.button.delete') }}\n            </div>\n          </div>\n        </div>\n        </div>\n      </div>\n    </div>\n    <!-- END LISTING STAMPS -->\n    \n    <!-- MODAL -->\n    <b-modal \n      id=\"create-stamp-modal\" \n      ref=\"create-stamp-modal\" \n      hide-footer size=\"xl\" \n      :no-close-on-backdrop=\"true\" \n      :no-close-on-esc=\"true\"\n      :hide-header-close=\"true\">\n      <div class=\"create-signature-modal\">\n        <div class=\"title\">\n          {{ $t('signature.modal.titleStamp') }}\n        </div>\n        <!-- Tab Menu -->\n        <div class=\"row mb-md-4 mb-2\">\n          <div class=\"col-4 pr-0 pr-md-3\">\n            <b-button\n              class=\"stamp-tab-nav\"\n              :variant=\"config_val.navtab_index == 'Personnel' ? 'primary' : 'outline-primary'\"\n              v-on:click=\"onSyncTab('Personnel')\" \n              block\n            >\n              {{ $t('signature.modal.tab.personnelSeal') }}\n            </b-button>\n          </div>\n          <div class=\"col-4 px-2 px-md-3\">\n            <b-button\n              class=\"stamp-tab-nav\"\n              :variant=\"config_val.navtab_index == 'Corporate' ? 'primary' : 'outline-primary'\"\n              v-on:click=\"onSyncTab('Corporate')\"\n              block\n            >\n              {{ $t('signature.modal.tab.corporateSeal') }}\n            </b-button>\n          </div>\n          <div class=\"col-4 pl-0 pl-md-3\">\n            <b-button\n              class=\"stamp-tab-nav\"\n              :variant=\"config_val.navtab_index == 'Upload' ? 'primary' : 'outline-primary'\"\n              v-on:click=\"onSyncTab('Upload')\"\n              block\n            >\n              {{ $t('signature.modal.tab.upload') }}\n            </b-button>\n          </div>\n        </div>\n        <!-- End Tab Menu -->\n        \n        <!-- Generate Stamp Seal -->\n        <div>\n          <div class=\"row mb-4\" v-if=\"config_val.navtab_index == 'Personnel'\">\n            <div class=\"col px-sm-3 px-1\">\n              <hr />\n              <!-- Forms -->\n              <div class=\"row mb-1\">\n                <!-- Select Language -->\n                <div class=\"col-lg-2 col-12 pr-lg-1\">\n                  <UserSelect\n                    v-bind:value=\"form_data.language\"\n                    v-bind:items=\"['English', 'Korean', 'Japanese']\"\n                    v-model=\"form_data.language\"\n                    @changeValue=\"onSyncLanguage\"\n                  />\n                </div>\n                <!-- Select Title -->\n                <div class=\"col-lg-2 col-sm-3 col-4 px-lg-1 pr-1\" hidden>\n                  <UserSelect\n                    v-bind:value=\"form_data.title\"\n                    v-bind:items=\"['Mr', 'Mrs', 'Ms', 'Miss', 'Dr', 'Prof']\"\n                    v-model=\"form_data.title\"\n                    @changeValue=\"form_data.title = $event\"\n                  />\n                </div>\n                <!-- Input Name -->\n                <div class=\"col-lg-8 col-12 px-lg-1 px-auto\">\n                  <div class=\"form-group\">\n                    <input\n                      type=\"text\"\n                      :class=\"{\n                        'form-control': true,\n                        'input-invalid': (form_data.language == 'English' ? (form_data.stamp_text.length >= 25) : (form_data.stamp_text.length >= 9)),\n                        'input-valid': (form_data.language == 'English' ? (form_data.stamp_text.length < 25) : (form_data.stamp_text.length < 9))\n                      }\"\n                      id=\"stamp_text\"\n                      name=\"stamp_text\"\n                      v-model=\"form_data.stamp_text\"\n                      :placeholder=\"$t('signature.modal.placeholderStamp')\"\n                      :maxlength=\"form_data.language == 'English' ? 25 : 9\"\n                      @changeValue=\"form_data.stamp_text = $event\"\n                      v-on:keyup=\"onValidateInput\"\n                    />\n                    <p v-if=\"validator.isError\" class=\"validation-error text-left pl-2\">\n                      {{validator.text}}\n                    </p>\n                  </div>\n                </div>\n\n                <!-- Generate Button -->\n                <div class=\"col-lg-2 col-12 pl-lg-1\">\n                  <b-button variant=\"primary\" block v-on:click=\"onGenerateStamp\">{{ $t('signature.button.generate') }}</b-button>\n                </div>\n              </div>\n\n              <!-- Generated Stamp Seal -->              \n              <div class=\"stamp-related\">\n                <div class=\"signatures px-2 scroll-box\">\n                  <div v-if=\"generate_data.length\" class=\"row\">\n                    <div class=\"col-lg-4 col-12 my-3\" \n                      v-bind:key=\"index\"\n                      v-for=\"(item, index) in generate_data\">\n                      <div \n                        :class=\"{\n                          'listing-stamp sign-result': true,\n                          'checked': index == config_val.navtab_selected\n                        }\"\n                        @click=\"config_val.navtab_selected = index\"\n                      >\n                        <GenerateStampSvg\n                          ref=\"generatedPers\"\n                          :paramsData=\"{\n                            idData: index,\n                            type: 'Personnel',\n                            text: item.stamp_text,\n                            lang: item.language == 'English' ? 'gb' : item.language == 'Korean' ? 'kr' : 'jp'\n                          }\" \n                        />\n\n                      <!--\n                        <span class=\"p-2\" ref=\"generatedPers\">\n                          <Stamp\n                            v-bind:key=\"index\"\n                            :paramStamp=\"item\"\n                            :configStamp=\"{\n                              language: item.language == 'English' ? 'gb' : item.language == 'Korean' ? 'kr' : 'jp'\n                            }\"\n                            :classChecked=\"(index == config_val.navtab_selected?'checked':'')\" :btnClickHandler=\"() => {config_val.navtab_selected = index}\"\n                          />\n                        </span>\n                      -->\n                        \n                        <div v-if=\"index == config_val.navtab_selected\" class=\"check-box text-left\">\n                          <img src=\"img/icons/check-2.svg\" />\n                        </div>\n                      </div>\n\n\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row mb-4\" v-else-if=\"config_val.navtab_index == 'Corporate'\">\n            <div class=\"col px-sm-3 px-1\">\n              <hr />\n              <!-- Forms -->\n              <div class=\"row mb-1\">\n                <!-- Select Language -->\n                <div class=\"col-lg-2 col-md-4 pr-md-1\">\n                  <UserSelect\n                    v-bind:value=\"form_data.language\"\n                    v-bind:items=\"['English', 'Korean', 'Japanese']\"\n                    v-model=\"form_data.language\"\n                    @changeValue=\"onSyncLanguage\"\n                  />\n                </div>\n                <!-- Input Name -->\n                <div class=\"col-md pl-md-1\">\n                  <div class=\"form-group\">\n                    <input\n                      type=\"text\"\n                      :class=\"{\n                        'form-control': true,\n                        'input-invalid': (form_data.language == 'English' ? (form_data.stamp_text.length >= 25) : (form_data.stamp_text.length >= 9)),\n                        'input-valid': (form_data.language == 'English' ? (form_data.stamp_text.length < 25) : (form_data.stamp_text.length < 9))\n                      }\"\n                      id=\"stamp_text\"\n                      name=\"stamp_text\"\n                      v-model=\"form_data.stamp_text\"\n                      :placeholder=\"$t('signature.modal.placeholderStamp')\"\n                      :maxlength=\"form_data.language == 'English' ? 25 : 9\"\n                      @changeValue=\"form_data.stamp_text = $event\"\n                      v-on:keyup=\"onValidateInput\"\n                    />\n                    <p v-if=\"validator.isError\" class=\"validation-error text-left pl-2\">\n                      {{validator.text}}\n                    </p>\n                  </div>\n                </div>\n\n                <!-- Generate Button -->\n                <div class=\"col-lg-2 col-12 pl-lg-1\">\n                  <b-button variant=\"primary\" block v-on:click=\"onGenerateStamp\">{{ $t('signature.button.generate') }}</b-button>\n                </div>\n              </div>\n\n              <!-- Generated Stamp Seal -->\n              <div class=\"stamp-related\">\n                <div class=\"signatures px-2 scroll-box\">\n                  <div v-if=\"generate_data.length\" class=\"row\">\n                    <div class=\"col-lg-4 col-12 my-3\" \n                      v-bind:key=\"index\"\n                      v-for=\"(item, index) in generate_data\">\n                      <div \n                        :class=\"{\n                          'listing-stamp sign-result': true,\n                          'checked': index == config_val.navtab_selected\n                        }\"\n                        @click=\"config_val.navtab_selected = index\"\n                      >\n                      \n                        <GenerateStampSvg\n                          ref=\"generatedCorp\"\n                          :paramsData=\"{\n                            idData: index,\n                            type: 'Corporate',\n                            text: item.stamp_text,\n                            lang: item.language == 'English' ? 'gb' : item.language == 'Korean' ? 'kr' : 'jp'\n                          }\" \n                        />\n                      \n                      <!--\n                        <span class=\"p-2\" ref=\"generatedCorp\">\n                          <Stamp\n                            v-bind:key=\"index\"\n                            :paramStamp=\"item\"\n                            :configStamp=\"{\n                              language: item.language == 'English' ? 'gb' : item.language == 'Korean' ? 'kr' : 'jp'\n                            }\"\n                            :classChecked=\"(index == config_val.navtab_selected?'checked':'')\" :btnClickHandler=\"() => {config_val.navtab_selected = index}\"\n                          />\n                        </span>\n                      -->\n\n                        <div v-if=\"index == config_val.navtab_selected\" class=\"check-box text-left\">\n                          <img src=\"img/icons/check-2.svg\" />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <!-- Upload Stamp -->\n          <div class=\"row mb-4\" v-else>\n            <div class=\"col\">\n              <hr />\n              <!-- Forms -->\n              <ImageUpload \n                v-bind:files=\"stamp_file\" \n                v-bind:config_file=\"({\n                  img: 'img/icons/upload.svg',\n                  text: $t('signature.modal.uploadStamp')\n                })\"\n                v-on:toggle=\"toggleStampUpload($event)\" \n              />\n            </div>\n          </div>\n        \n          <hr />\n\n          <div class=\"footer\">\n            <div class=\"summary\">\n              {{ $t('signature.modal.tncStamp') }}\n            </div>\n            <div class=\"buttons\">\n              <b-button variant=\"link\" v-on:click=\"hideStampModal\">\n                <span>\n                  <i class=\"fa fa-close\"></i> {{ $t('signature.button.cancel') }}\n                </span>\n              </b-button>\n\n              <div v-if=\"config_val.navtab_index != 'Upload'\">\n                <b-button variant=\"primary\" v-on:click=\"onCreateStamp\">{{ $t('signature.button.create') }}</b-button>\n              </div>\n              <div v-else>\n                <b-button variant=\"primary\" v-on:click=\"onUploadStamp\">{{ $t('signature.button.create') }}</b-button>\n              </div>\n              \n            </div>\n          </div>\n        </div>\n      </div>\n    </b-modal>\n    <!-- END MODAL -->\n  </div>\n</template>\n\n<script>\nimport { html2canvas } from 'vue-html2canvas'\nimport axios from 'axios'\nimport store from '../../store/store'\nimport { mapGetters, mapState } from 'vuex'\nimport { stampseal } from '../../mixins/stampseal'\nimport { svgstyles } from '../../utils/svgstyle'\nimport Stamp from '../../components/common/Stamp'\nimport UserSelect from '../../components/UserSelect'\nimport ImageUpload from '../../components/common/ImageUpload'\nimport CustomLoader from '../../components/common/CustomLoader'\nimport { \n  STAMP_GET, \n  STAMP_CREATE,\n  STAMP_UPLOAD,\n  STAMP_UPDATE, \n  STAMP_SOFTDELETE, \n  SIGNATURE_DESTROY, \n  AUTH_LOADING \n} from '../../store/actions.type'\nimport GenerateStampSvg from '../../components/common/GenerateStampSvg'\n\nexport default {\n  name: 'StampSeals',\n  components: {\n    UserSelect, ImageUpload,\n    Stamp, GenerateStampSvg\n  },\n  mixins: [stampseal, svgstyles],\n  data() {\n    return {\n      user_selected_stamp: 0,\n      user_stamp: '',\n\n      form_data: {\n        stamp_type: 'Personnel',\n        title: 'Mr',\n        stamp_text: '',\n        font_face: '',\n        font_size: '',\n        language: 'English',\n        uploaded_url: ''\n      },\n      s_data: {\n        stamp_type: 'Personnel',\n        title: '',\n        text: '',\n        font_face: '',\n        font_size: '',\n        language: 'English',\n        uploaded_url: ''\n      },\n      generate_data: [],\n      generate_img: '',\n\n      stamp_file: [],\n      uploadStampImg: {},\n\n      validator: {\n        isError: false,\n        text: ''\n      },\n\n      config_val: {\n        navtab_index: 'Personnel',\n        navtab_selected: 0,\n        lang_short: 'gb',\n        languages: {\n          /** English */\n          English: [\"Mrs Saint Delafield\", \"Badhead Typeface\", \"Banthers\", \"Connoisseurs\", \"Cutepunk_Regular\", \"Elrotex Basic\", \"GreatVibes-Regular\", \"KLSweetPineappleRegular\", \"Mightype Script\", \"pops_08_REGULAR\", \"somethingwild-Regular\"],\n          /** Korean */\n          Korean: [\"KimNamyun\", \"KCC-eunyoung\", \"Goyang\", \"SangSangFlowerRoad\", \"InkLipquid\", \"Dovemayo-Medium\", \"SDMiSaeng\", \"HSGyoulnoonkot\", \"Jeju Hallasan\"],\n          /** Japanese */\n          Japanese: [\"crayon_1-1\", \"RiiPopkkR\", \"RiiT_F\", \"sjis_sp_setofont\", \"GenEiLateGoN_v2\", \"GenEiAntiquePv5-M\"]\n        },\n        fontsize: {\n          // English\n          English: [\"26\", \"29\", \"19\", \"29\", \"29\", \"14\", \"21\", \"29\", \"19\", \"18\", \"29\"],\n          // Korean\n          Korean: [\"27\", \"33\", \"22\", \"31\", \"30\", \"21\", \"34\", \"19\", \"21\"],\n          // Japanese\n          Japanese: [\"22\", \"18\", \"20\", \"21\", \"20\", \"20\"]\n        }\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(['USER', 'STAMPS', 'loading', 'errors'])\n  },\n  mounted() {\n    var vm = this\n\n    vm.getStamps()\n      .then(response => {\n        store.dispatch(STAMP_GET, response.data.data)\n      })\n      .catch(errors => {\n        console.log(errors.response)\n      });\n  },\n  methods: {\n    /** Create Personnel Stamp */\n    onCreateStamp: function () { \n      var vm = this\n\n      store.dispatch(AUTH_LOADING, true)\n\n      \n      vm.fontface()\n        .then(response => {          \n          var width = 562,\n            height = vm.generate_data[vm.config_val.navtab_selected].language == 'English' ? '412' : '562'\n            pngBaseStamp\n\n          if (vm.config_val.navtab_index == 'Personnel') {\n            // append style in svg\n            let defs = vm.$refs[\"generatedPers\"][vm.config_val.navtab_selected].$refs[\"childStampSvg\"].children[\"2\"],\n                styles = document.createElementNS(\"http://www.w3.org/2000/svg\", \"style\"),\n                node = document.createTextNode(response);              \n            defs.appendChild(styles);\n            styles.appendChild(node);\n\n            let svgNode = vm.$refs[\"generatedPers\"][vm.config_val.navtab_selected].$refs.childStampSvg,\n              sStamp = new XMLSerializer().serializeToString(svgNode)\n\n            var pngBaseStamp = this.svgToPng(sStamp, width, height, 10)\n          }\n          else {\n            // append style in svg\n            let defs = vm.$refs[\"generatedCorp\"][vm.config_val.navtab_selected].$refs[\"childStampSvg\"].children[\"2\"],\n                styles = document.createElementNS(\"http://www.w3.org/2000/svg\", \"style\"),\n                node = document.createTextNode(response);              \n            defs.appendChild(styles);\n            styles.appendChild(node);\n\n            let svgNode = vm.$refs[\"generatedCorp\"][vm.config_val.navtab_selected].$refs.childStampSvg,\n              sStamp = new XMLSerializer().serializeToString(svgNode)\n          \n            var pngBaseStamp = this.svgToPng(sStamp, width, height, 10)\n          }\n\n          pngBaseStamp.then(response => {\n            let getGenerated = vm.generate_data[vm.config_val.navtab_selected],\n              shortformLang = getGenerated.language == 'English' ? 'gb' : getGenerated.language == 'Korean' ? 'kr' : 'jp'\n\n            vm.s_data = {\n              stamp_type: getGenerated.stamp_type,\n              title: getGenerated.title,\n              stamp_text: getGenerated.stamp_text,\n              font_face: getGenerated.font_face,\n              font_size: getGenerated.font_size,\n              language: shortformLang,\n              uploaded_url: response\n            }\n\n            vm.createStamp(vm.s_data)\n              .then(response => {\n                store.dispatch(STAMP_CREATE, response.data.data)\n                  .then(() => {\n                    vm.$toast.success({\n                      title: \"Stamp Created\",\n                      message: \"User's stamp have created!\"\n                    });\n\n                    vm.$refs[\"create-stamp-modal\"].hide();\n                    store.dispatch(AUTH_LOADING, false)\n                  })\n              })\n          })      \n      })\n      .catch(error => {\n        store.dispatch(AUTH_LOADING, false)\n        console.log(error)\n      })\n    },\n\n    /** Upload Stamp */\n    toggleStampUpload: function (e) {\n      if (!e) return\n\n      let reader = new FileReader();\n      reader.onload = e => this.uploadStampImg = e.target.result\n      reader.readAsDataURL(e)\n    },\n    onUploadStamp: function () {\n      var vm = this\n      \n      store.dispatch(AUTH_LOADING, true)\n\n      let s_image = {\n        image: this.uploadStampImg\n      }\n\n      vm.uploadStamp(s_image)\n        .then(response => {\n          store.dispatch(STAMP_UPLOAD, response.data.data)\n            .then(() => {\n              vm.$toast.success({\n                title: \"Stamp Uploaded\",\n                message: \"User's stamp have uploaded!\"\n              });\n\n              vm.$refs[\"create-stamp-modal\"].hide();\n              store.dispatch(AUTH_LOADING, false)\n            })\n        })\n        .catch(errors => {\n          store.dispatch(AUTH_LOADING, false)\n          console.log(errors)\n        })\n    },\n\n    /** Show Stamp */\n    onShowStamp: function () { },\n\n    /** Update Stamp */\n    onDefaultStamp: function (id) {\n      var vm = this\n\n      store.dispatch(AUTH_LOADING, true)\n\n      vm.defaultStamp(id)\n        .then(response => {\n          store.dispatch(STAMP_UPDATE, response.data.data)\n            .then(() => {\n              vm.$toast.success({\n                title: \"Stamp Default\",\n                message: \"User's stamp have set to default!\"\n              })\n              \n              store.dispatch(AUTH_LOADING, false)\n            })\n        })\n        .catch(errors => {\n          store.dispatch(AUTH_LOADING, false)\n          console.log(errors)\n        })      \n    },\n\n    /** Delete Stamp */\n    onDeleteStamp: function (id) { \n      var vm = this\n\n      if (confirm(\"Do you really want to delete?\")) {\n        store.dispatch(AUTH_LOADING, true)\n\n        vm.softDeleteStamp(id)\n          .then(response => {\n            store.dispatch(STAMP_SOFTDELETE, id)\n              .then(() => {\n                vm.$toast.warn({\n                  title: \"Stamp Deleted\",\n                  message: \"User's stamp seal have deleted!\"\n                })\n\n                store.dispatch(AUTH_LOADING, false)\n              })\n          })\n          .catch(errors => {\n            store.dispatch(AUTH_LOADING, false)\n            console.log(errors)\n          })\n      }\n    },\n\n    /** Download Stamp */\n    onDownloadStamp: function (url) {\n      let vm = this,\n          imageURL = url, \n          canvas = document.createElement(\"canvas\"),\n          downloadedImg = new Image\n\n      downloadedImg.crossOrigin = \"Anonymous\";\n      downloadedImg.onload = function () {\n        let context = canvas.getContext(\"2d\");\n\n        canvas.width = downloadedImg.width;\n        canvas.height = downloadedImg.height;\n      \n        context.drawImage(downloadedImg, 0, 0);\n      \n        try {\n          let dataURL = canvas.toDataURL(\"image/png\")\n          vm.downloadURI(dataURL, 'stamp.png')\n        }\n        catch(err) {\n          console.log(\"Error: \" + err);\n        }  \n      }\n      downloadedImg.src = imageURL;\n    },\n    downloadURI: function (uri, name) {\n      var link = document.createElement('a');\n      link.download = name;\n      link.href = uri;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    },\n    \n    \n\n\n\n    /** Utils */\n    /**\n    * converts an svg string to base64 png using the domUrl\n    * @param {string} svgText the svgtext\n    * @param {number} [margin=0] the width of the border - the image size will be height+margin by width+margin\n    * @param {string} [fill] optionally backgrund canvas fill\n    * @return {Promise} a promise to the bas64 png image\n    */\n    svgToPng: function (svgText, setWidth, setHeight, margin, fill) {\n      // convert an svg text to png using the browser\n      return new Promise(function(resolve, reject) {\n        try {\n          // can use the domUrl function from the browser\n          var domUrl = window.URL || window.webkitURL || window;\n          if (!domUrl) {\n            throw new Error(\"(browser doesnt support this)\")\n          }\n          \n          // figure out the height and width from svg text\n          var match = svgText.match(/height=\\\"(\\d+)/m);\n          var height = match && match[1] ? parseInt(match[1],10) : 100;\n          var match = svgText.match(/width=\\\"(\\d+)/m);\n          var width = match && match[1] ? parseInt(match[1],10) : 400;\n          margin = margin || 0;\n\n          width = parseInt(setWidth);\n          height = parseInt(setHeight);\n          \n          // it needs a namespace\n          if (!svgText.match(/xmlns=\\\"/mi)){\n            svgText = svgText.replace ('<svg ','<svg xmlns=\"http://www.w3.org/2000/svg\" ') ;  \n          }\n          \n          // create a canvas element to pass through\n          var canvas = document.createElement(\"canvas\");\n          canvas.width = width+margin*2;\n          canvas.height = height+margin*2;\n          var ctx = canvas.getContext(\"2d\");        \n          \n          // make a blob from the svg\n          var svg = new Blob([svgText], {\n            type: \"image/svg+xml;charset=utf-8\"\n          });\n          \n          // create a dom object for that image\n          var url = domUrl.createObjectURL(svg);\n          \n          // create a new image to hold it the converted type\n          var img = new Image;\n          \n          // when the image is loaded we can get it as base64 url\n          img.onload = function() {\n            // draw it to the canvas\n            ctx.drawImage(this, margin, margin);\n            \n            // if it needs some styling, we need a new canvas\n            if (fill) {\n              var styled = document.createElement(\"canvas\");\n              styled.width = canvas.width;\n              styled.height = canvas.height;\n              var styledCtx = styled.getContext(\"2d\");\n              styledCtx.save();\n              styledCtx.fillStyle = fill;   \n              styledCtx.fillRect(0,0,canvas.width,canvas.height);\n              styledCtx.strokeRect(0,0,canvas.width,canvas.height);\n              styledCtx.restore();\n              styledCtx.drawImage (canvas, 0,0);\n              canvas = styled;\n            }\n            // we don't need the original any more\n            domUrl.revokeObjectURL(url);\n            // now we can resolve the promise, passing the base64 url\n            resolve(canvas.toDataURL());\n          };\n          \n          // load the image\n          img.src = url;\n          \n        } catch (err) {\n          reject('failed to convert svg to png ' + err);\n        }\n      })\n    },\n\n    onGenerateStamp: async function () {\n      var vm = this\n      \n      store.dispatch(AUTH_LOADING, true)\n      \n      // Clear old generated_data\n      vm.generate_data.splice(0, vm.generate_data.length)\n      vm.config_val.navtab_selected = 0\n      await vm.$nextTick() // wait to clear\n\n      let lang = vm.form_data.language\n      let langFace = vm.config_val.languages[lang]\n      let langSize = vm.config_val.fontsize[lang]\n\n      langFace.forEach((face, index) => {\n          let generate = {\n            stamp_type: vm.config_val.navtab_index,\n            title: vm.form_data.title,\n            stamp_text: vm.form_data.stamp_text,\n            font_face: face,\n            font_size: langSize[index],\n            language: lang,\n            uploaded_url: '',\n            etc: {\n              position: '',\n              company: ''\n            }\n          }\n          vm.generate_data.push(generate)\n        })\n      \n      store.dispatch(AUTH_LOADING, false)\n    },\n    onSyncLanguage: function(e) {\n      this.form_data.language = e\n\n      this.config_val.lang_short = this.form_data.language == 'English' ? 'gb' : this.form_data.language == 'Korean' ? 'kr' : 'jp'\n    },\n    onSyncTab : function (e) {\n      this.config_val.navtab_index = e\n\n      this.clearGenerated()\n    },\n    onValidateInput: function () {\n      if (this.form_data.language == 'English') {\n        if (this.form_data.stamp_text.length >= 25) {\n          this.validator.isError = true\n          this.validator.text = 'Only can generate less than 25 characters'\n        }\n        else {\n          this.validator.isError = false\n          this.validator.text = ''\n        }  \n      }\n      else if (this.form_data.language == 'Korean' || this.form_data.language == 'Japanese') {\n        if (this.form_data.stamp_text.length >= 9) {\n          this.validator.isError = true\n          this.validator.text = 'Only can generate less than 9 characters'\n        }\n        else {\n          this.validator.isError = false\n          this.validator.text = ''\n        }\n      }\n      else {\n        this.validator.isError = false\n        this.validator.text = ''\n      }      \n    },\n    showStampModal: function () {\n      this.$refs[\"create-stamp-modal\"].show()  \n    },\n    hideStampModal: function () {\n      this.$refs[\"create-stamp-modal\"].hide()\n      this.clearGenerated()\n    },\n    clearSForm() {\n      Object.assign(this.$data, this.$options.data.apply(this))\n    },\n    clearGenerated() {\n      this.config_val.navtab_selected = 0\n      this.form_data.stamp_text = ''\n\n      this.generate_data.splice(0, this.generate_data.length)\n    },\n    // Timeout Delay\n    onDelay (fn, ms) {\n      let timer = 0\n      return function(...args) {\n        clearTimeout(timer)\n        timer = setTimeout(fn.bind(this, ...args), ms || 0)\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.scroll-box {\n  max-height: 350px;\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n</style>"]}]}