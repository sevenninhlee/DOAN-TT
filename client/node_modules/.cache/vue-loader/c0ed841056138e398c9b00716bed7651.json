{"remainingRequest":"/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/Jobs/DOAN-TT/client/src/components/FileUpload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/Jobs/DOAN-TT/client/src/components/FileUpload.vue","mtime":1573548261927},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/babel-loader/lib/index.js","mtime":1571304325577},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js","mtime":1571304326381}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport UserIcon from \"./UserIcon\";\nimport { GoogleDrive, Dropbox, OneDrive, Box } from \"./connect\";\nimport { bytesToSize, addParamsToBlob, extensionToMimeType } from \"../helpers\";\nimport { EventBus } from \"../config/event-bus\";\nimport { mapGetters, mapState } from \"vuex\";\nimport store from \"../store/store\";\nimport { GET_DOCS } from \"../store/actions.type\";\nimport {\n  GET_BLOD_FROM_URL,\n  REMOVE_DOCUMENT_REQUEST\n} from \"../store/modules/document\";\n\nexport default {\n  name: \"FileUpload\",\n  components: {\n    UserIcon,\n    GoogleDrive,\n    Dropbox,\n    OneDrive,\n    Box\n  },\n  props: [\"files\", \"default_files\"],\n  data() {\n    return {\n      dragAndDropCapable: false,\n      old_files: [],\n      landingFiles: [],\n      isFile: false\n    };\n  },\n  computed: {\n    ...mapGetters({\n      getDocuments: \"getDocuments\"\n    }),\n  },\n  created() {\n    \n  },\n  mounted() {\n    if (this.$route.query.document_id) {\n      this.old_files = [];\n      store\n        .dispatch(GET_DOCS, this.$route.query.document_id)\n        .then(res => {\n          this.getDocuments.map((value, key) => {\n            store\n              value.file ={\n                ...value,\n                name: value.document_name,\n                downloadUrl: value.document_file,\n                id: value.id,\n                size: value.size\n              };\n              this.old_files.push(value.file);\n          });\n          this.isFile = true;\n          this.$emit(\"isData\", true);\n        })\n        .catch(err => {\n          this.$router.push(\"/docu-sign/add-document\");\n        });\n\n    } else {\n      this.isFile = false;\n    }\n    this.dragAndDropCapable = this.determineDragAndDropCapable();\n    if (this.dragAndDropCapable) {\n      [\n        \"drag\",\n        \"dragstart\",\n        \"dragend\",\n        \"dragover\",\n        \"dragenter\",\n        \"dragleave\",\n        \"drop\"\n      ].forEach(\n        function(evt) {\n          this.$refs.fileform &&\n            this.$refs.fileform.addEventListener(\n              evt,\n              function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n              }.bind(this),\n              false\n            );\n        }.bind(this)\n      );\n\n      this.$refs.fileform &&\n        this.$refs.fileform.addEventListener(\n          \"drop\",\n          function(e) {\n            this.addFiles(e.dataTransfer.files);\n          }.bind(this)\n        );\n    }\n  },\n  methods: {\n    getFileType(fileName, iconUrl = null, url = null) {\n      if(url && url.indexOf(\"https://docs.google.com\") != -1){\n        return iconUrl;\n      }else if(fileName.split(\".\").pop() === \"mp3\" || fileName.split(\".\").pop() === \"mp4\") {\n        return \"img/icons/warning-sign.svg\";\n      } else {\n        return \"img/icons/\" + fileName.split(\".\").pop() + \".svg\";\n      }\n    },\n    getFileSize(size) {\n      return size== 0 ? '' : bytesToSize(size);\n    },\n    determineDragAndDropCapable() {\n      var div = document.createElement(\"div\");\n      return (\n        (\"draggable\" in div || (\"ondragstart\" in div && \"ondrop\" in div)) &&\n        \"FormData\" in window &&\n        \"FileReader\" in window\n      );\n    },\n    onFileChange(e) {\n      var files = e.target.files || e.dataTransfer.files;\n      files && files.length > 0 && this.addFiles([files[0]]);\n    },\n    addFiles(files, needLoadFile) {\n      files.map( (val, key) => {\n        if(val.type.indexOf(\"video/mp4\") != -1 || val.type.indexOf(\"audio/mpeg\") != -1)\n        {\n          let text = \"File \"+val.name+\" is not a supported format\"\n          this.$awn.alert(text, {\n            position: \"bottom-left\",\n            labels: {\n              alert: \"Danger Message\"\n            }\n          })\n        }\n      })\n      if (this.$route.path.indexOf(\"landing\") != -1) {\n        this.$emit(\"addLandingFiles\", files);\n        this.$router.push({\n          path: \"/docu-sign/add-document\",\n          // query: { files: files }\n        });\n      }\n      this.$emit(\"addFiles\", files, needLoadFile);\n\n    },\n    removeFile(index, isRemove, doc_id = null) {\n      if (isRemove) {\n        store.dispatch(REMOVE_DOCUMENT_REQUEST, doc_id).then(resp => {\n          if (resp && resp.status) {\n            this.old_files.splice(index, 1);\n            if(this.old_files.length < 1) {\n              this.$emit(\"isData\", false);\n            }\n          } else {\n            window.confirm(\"Remove file fail\");\n          }\n        });\n      } else {\n        this.files.splice(index, 1);\n      }\n    },\n    openBrows() {\n      this.$refs.file.click();\n    },\n    checkHasFiles() {\n      return (this.files && this.files.length > 0) || (this.old_files && this.old_files.length > 0);\n    }\n  },\n  \n};\n",{"version":3,"sources":["FileUpload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"FileUpload.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"w-100\">\n    <div class=\"drag-drop-container\" v-bind:class=\"{'drag-has-file':checkHasFiles()}\">\n      <form ref=\"fileform\" class=\"drag-drop-div\" v-bind:class=\"{'has-files':checkHasFiles()}\">\n        <span v-on:click=\"openBrows()\">\n          <UserIcon icon=\"folder.svg\" class=\"folder-2\" />\n        </span>\n        <input type=\"file\" ref=\"file\" multiple style=\"display: none\" @change=\"onFileChange\" />\n        <div class=\"px-md-3\" v-bind:class=\"{'has-file-upload-type':checkHasFiles()}\">\n          <div class=\"drag-a-file\" v-bind:class=\"{'has-file':checkHasFiles()}\">\n            {{ $t(\"home.drag.title_1\") }}\n            <span\n              class=\"text-style-1 clickable-text\"\n              v-on:click=\"openBrows()\"\n            >{{ $t(\"home.drag.title_2\") }}</span>\n            {{ $t(\"home.drag.title_3\") }}\n          </div>\n          <div\n            class=\"you-can-use\"\n            v-bind:class=\"{'text-left-align':checkHasFiles()}\"\n          >{{ $t(\"home.drag.subtitle\") }}</div>\n        </div>\n        <div class=\"store-src\" v-bind:class=\"{'none-top-margin':checkHasFiles()}\">\n          <Dropbox @addFiles=\"addFiles\" />\n          <GoogleDrive @addFiles=\"addFiles\" />\n          <OneDrive @addFiles=\"addFiles\" />\n          <Box @addFiles=\"addFiles\" />\n          <!-- <UserIcon icon=\"dropbox.svg\" class=\"store-src-item\" /> -->\n          <!-- <UserIcon icon=\"google-drive.svg\" class=\"store-src-item\" /> -->\n          <!-- <UserIcon icon=\"onedrive.svg\" class=\"store-src-item\" /> -->\n          <!-- <UserIcon icon=\"box.svg\" class=\"store-src-item\" /> -->\n        </div>\n        <div\n          class=\"you-can-use\"\n          v-bind:class=\"{'you-can-use-has-file':checkHasFiles()}\"\n        >{{ $t(\"home.drag.comments\") }}</div>\n        <b-button\n          variant=\"outline-primary\"\n          style=\"min-width:153px;margin-top: 10px;\"\n          :class=\"{'none-top-margin':files.length > 0}\"\n        >{{ $t(\"home.drag.button\") }}</b-button>\n      </form>\n    </div>\n    <div class=\"file-list\">\n      <div v-if=\"$route.query.document_id\">\n        <div v-for=\"(file, index) in old_files\" :key=\"index\" class=\"file-listing\">\n          <div class=\"file-content\">\n            <img v-bind:src=\"getFileType(file.name)\" class=\"folder-2\" />\n            <div class=\"file-info ml-3\">\n              <div class=\"doc-file-name\">{{ file.name }}</div>\n              <div class=\"doc-file-info\">{{getFileSize(file.bytes || file.size)}}</div>\n              <!-- <div class=\"doc-file-info\">5 pages</div> -->\n            </div>\n          </div>\n          <div class=\"file-control\">\n            <!-- <i class=\"fa fa-ellipsis-h fa-lg mr-4\"></i> -->\n            <!-- <i class=\"cui-trash icons\"></i> -->\n            <span v-on:click=\"removeFile(index, true, file.id)\">\n              <UserIcon icon=\"delete.svg\" :button=\"true\" />\n            </span>\n          </div>\n        </div>\n      </div>\n      <div v-for=\"(file, index) in files\" :key=\"index+1000\" class=\"file-listing\">\n        <div class=\"file-content\">\n          <img v-bind:src=\"getFileType(file.name, file.iconUrl ? file.iconUrl : null,file.url ? file.url : null)\" class=\"folder-2\" />\n          <div class=\"file-info ml-3\">\n            <div class=\"doc-file-name\">{{ file.name }}</div>\n            <div class=\"doc-file-info\">{{getFileSize(file.bytes || file.size)}}</div>\n            <!-- <div class=\"doc-file-info\">5 pages</div> -->\n          </div>\n        </div>\n        <div class=\"file-control\">\n          <!-- <i class=\"fa fa-ellipsis-h fa-lg mr-4\"></i> -->\n          <!-- <i class=\"cui-trash icons\"></i> -->\n          <span v-on:click=\"removeFile(index, false)\">\n            <UserIcon icon=\"delete.svg\" :button=\"true\" />\n          </span>\n        </div>\n      </div>\n      <!-- <div v-if=\"files && files.length>0\">\n        <div class=\"file-listing w-100\">\n          <div class=\"file-content w-100\">\n            <img v-bind:src=\"getFileType(files[0].name)\" class=\"folder-2\" />\n            <div class=\"file-info ml-3 w-100\">\n              <div class=\"doc-file-name\">168 KB of 378 KB (56% Done)</div>\n              <div class=\"text-right\">\n                <i class=\"cui-circle-x icons\" style=\"font-size:18px\"></i>\n                <b-progress :value=\"56\" :max=\"100\" class=\"mt-1\"></b-progress>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>-->\n    </div>\n  </div>\n</template>\n\n<script>\nimport UserIcon from \"./UserIcon\";\nimport { GoogleDrive, Dropbox, OneDrive, Box } from \"./connect\";\nimport { bytesToSize, addParamsToBlob, extensionToMimeType } from \"../helpers\";\nimport { EventBus } from \"../config/event-bus\";\nimport { mapGetters, mapState } from \"vuex\";\nimport store from \"../store/store\";\nimport { GET_DOCS } from \"../store/actions.type\";\nimport {\n  GET_BLOD_FROM_URL,\n  REMOVE_DOCUMENT_REQUEST\n} from \"../store/modules/document\";\n\nexport default {\n  name: \"FileUpload\",\n  components: {\n    UserIcon,\n    GoogleDrive,\n    Dropbox,\n    OneDrive,\n    Box\n  },\n  props: [\"files\", \"default_files\"],\n  data() {\n    return {\n      dragAndDropCapable: false,\n      old_files: [],\n      landingFiles: [],\n      isFile: false\n    };\n  },\n  computed: {\n    ...mapGetters({\n      getDocuments: \"getDocuments\"\n    }),\n  },\n  created() {\n    \n  },\n  mounted() {\n    if (this.$route.query.document_id) {\n      this.old_files = [];\n      store\n        .dispatch(GET_DOCS, this.$route.query.document_id)\n        .then(res => {\n          this.getDocuments.map((value, key) => {\n            store\n              value.file ={\n                ...value,\n                name: value.document_name,\n                downloadUrl: value.document_file,\n                id: value.id,\n                size: value.size\n              };\n              this.old_files.push(value.file);\n          });\n          this.isFile = true;\n          this.$emit(\"isData\", true);\n        })\n        .catch(err => {\n          this.$router.push(\"/docu-sign/add-document\");\n        });\n\n    } else {\n      this.isFile = false;\n    }\n    this.dragAndDropCapable = this.determineDragAndDropCapable();\n    if (this.dragAndDropCapable) {\n      [\n        \"drag\",\n        \"dragstart\",\n        \"dragend\",\n        \"dragover\",\n        \"dragenter\",\n        \"dragleave\",\n        \"drop\"\n      ].forEach(\n        function(evt) {\n          this.$refs.fileform &&\n            this.$refs.fileform.addEventListener(\n              evt,\n              function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n              }.bind(this),\n              false\n            );\n        }.bind(this)\n      );\n\n      this.$refs.fileform &&\n        this.$refs.fileform.addEventListener(\n          \"drop\",\n          function(e) {\n            this.addFiles(e.dataTransfer.files);\n          }.bind(this)\n        );\n    }\n  },\n  methods: {\n    getFileType(fileName, iconUrl = null, url = null) {\n      if(url && url.indexOf(\"https://docs.google.com\") != -1){\n        return iconUrl;\n      }else if(fileName.split(\".\").pop() === \"mp3\" || fileName.split(\".\").pop() === \"mp4\") {\n        return \"img/icons/warning-sign.svg\";\n      } else {\n        return \"img/icons/\" + fileName.split(\".\").pop() + \".svg\";\n      }\n    },\n    getFileSize(size) {\n      return size== 0 ? '' : bytesToSize(size);\n    },\n    determineDragAndDropCapable() {\n      var div = document.createElement(\"div\");\n      return (\n        (\"draggable\" in div || (\"ondragstart\" in div && \"ondrop\" in div)) &&\n        \"FormData\" in window &&\n        \"FileReader\" in window\n      );\n    },\n    onFileChange(e) {\n      var files = e.target.files || e.dataTransfer.files;\n      files && files.length > 0 && this.addFiles([files[0]]);\n    },\n    addFiles(files, needLoadFile) {\n      files.map( (val, key) => {\n        if(val.type.indexOf(\"video/mp4\") != -1 || val.type.indexOf(\"audio/mpeg\") != -1)\n        {\n          let text = \"File \"+val.name+\" is not a supported format\"\n          this.$awn.alert(text, {\n            position: \"bottom-left\",\n            labels: {\n              alert: \"Danger Message\"\n            }\n          })\n        }\n      })\n      if (this.$route.path.indexOf(\"landing\") != -1) {\n        this.$emit(\"addLandingFiles\", files);\n        this.$router.push({\n          path: \"/docu-sign/add-document\",\n          // query: { files: files }\n        });\n      }\n      this.$emit(\"addFiles\", files, needLoadFile);\n\n    },\n    removeFile(index, isRemove, doc_id = null) {\n      if (isRemove) {\n        store.dispatch(REMOVE_DOCUMENT_REQUEST, doc_id).then(resp => {\n          if (resp && resp.status) {\n            this.old_files.splice(index, 1);\n            if(this.old_files.length < 1) {\n              this.$emit(\"isData\", false);\n            }\n          } else {\n            window.confirm(\"Remove file fail\");\n          }\n        });\n      } else {\n        this.files.splice(index, 1);\n      }\n    },\n    openBrows() {\n      this.$refs.file.click();\n    },\n    checkHasFiles() {\n      return (this.files && this.files.length > 0) || (this.old_files && this.old_files.length > 0);\n    }\n  },\n  \n};\n</script>\n<style lang=\"scss\">\n@import \"./FileUpload.scss\";\n</style>\n"]}]}