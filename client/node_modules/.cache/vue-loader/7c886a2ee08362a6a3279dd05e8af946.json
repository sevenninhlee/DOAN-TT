{"remainingRequest":"/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/Jobs/DOAN-TT/client/src/containers/PaymentContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/Jobs/DOAN-TT/client/src/containers/PaymentContainer.vue","mtime":1573548264971},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/babel-loader/lib/index.js","mtime":1571304325577},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js","mtime":1571304326381}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  Header as AppHeader,\n  SidebarToggler,\n  Sidebar as AppSidebar,\n  SidebarFooter,\n  SidebarForm,\n  SidebarHeader,\n  SidebarMinimizer,\n  SidebarNav,\n  Aside as AppAside,\n  AsideToggler,\n  Footer as TheFooter,\n} from \"@coreui/vue\";\nimport DefaultHeaderDropdownAccnt from \"./DefaultHeaderDropdownAccnt\";\nimport UserIcon from \"../components/UserIcon\";\nimport UpgradePlan from \"./UpgradePlan\";\nimport Logout from \"../components/Logout\";\nimport AppLogo from \"../components/AppLogo\";\nimport SideFolders from \"../components/SideFolders\";\nimport SideFoldersMove from \"../components/SideFoldersMove\";\nimport { EventBus } from '../config/event-bus';\nimport { landingNavList } from \"../helpers/defaultValue\";\nimport { restructure } from \"../helpers/restructure\";\n\nimport store from '../store/store'\nimport { mapGetters } from \"vuex\";\nimport {\n  FOLDER_GET_REQUEST,\n  FOLDER_ADD_REQUEST,\n  FOLDER_RENAME_REQUEST,\n  FOLDER_DELETE_REQUEST\n} from \"../store/actions.type\";\n\nexport default {\n  name: \"DocumentsContainer\",\n  components: {\n    SideFolders,\n    AppLogo,\n    Logout,\n    UserIcon,\n    UpgradePlan,\n    AsideToggler,\n    AppHeader,\n    AppSidebar,\n    AppAside,\n    TheFooter,\n    DefaultHeaderDropdownAccnt,\n    SidebarForm,\n    SidebarFooter,\n    SidebarToggler,\n    SidebarHeader,\n    SidebarNav,\n    SidebarMinimizer,\n    SideFoldersMove\n  },\n  data() {\n    return {\n      show_add_folder: false,\n      current_item: '',\n      folder_rename: '',\n      folder_remove_id: 0,\n      folder_op_type: 'new',\n      nav: [\n        {\n          name: \"Account\",\n          url: \"/profile/account\",\n          icon: \"fa fa-user\"\n        },\n        {\n          name: \"Signature\",\n          url: \"/signature\",\n          icon: \"fa fa-pencil\"\n        },\n        {\n          name: \"Pricing Plan\",\n          url: \"/payment/upgrade-plan\",\n          icon: \"fa fa-tag\"\n        },\n        {\n          name: \"Branding\",\n          url: \"/profile/custom-branding\",\n          icon: \"fa fa-id-card\"\n        }\n      ],\n      folders: [{\n        id: 0,\n        name: \"Folders\",\n        parent_id: null,\n        children: []\n      }],\n      show_tool_menu: true,\n      id_folder_del: 0,\n      move_id: null,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      get_folders: 'get_folders',\n      folder_add: 'folder_add'\n    }),\n    computedNav() {\n      return this.addTranslateNav(landingNavList);\n    },\n    name() {\n      return this.$route.name;\n    },\n    list() {\n      return this.$route.matched.filter(\n        route => route.name || route.meta.label\n      );\n    }\n  },\n  created() {\n    this.getFolders()\n  },\n  mounted() {\n    if (this.$router.history.current.fullPath == \"/payment/document-list\") {\n      this.show_add_folder = true;\n    } else {\n      this.show_add_folder = false;\n    }\n    this.$root.$on('renameFolder', (layer_id, name) => {\n      this.folder_rename = name;\n      this.folder_op_type = \"rename\";\n      this.openRenameDialog(layer_id);\n    });\n    this.$root.$on('newFolder', (layer_id) => {\n      this.folder_rename = \"New Folder\";\n      this.folder_op_type = \"new\";\n      this.openRenameDialog(layer_id);\n    });\n    this.$root.$on('moveFolder', (layer_id, id) => {\n      this.folder_op_type = \"move\";\n      this.openMoveDialog(layer_id, id);\n      this.move_id = id;\n\n    });\n    this.$root.$on('removeFolder', (layer_id, index, id) => {\n      this.folder_op_type = \"remove\";\n      this.folder_remove_id = index;\n      this.openDeleteDialog(layer_id, index, id);\n      // this.renameFolder(this.folders, layer_id, id);\n    });\n    this.toggleSidebar();\n  },\n  methods: {\n    getFolders() {\n      let vm = this;\n      store.dispatch(FOLDER_GET_REQUEST)\n      .then( res => {\n        let get_folders = vm.get_folders;\n        let data_res = restructure(get_folders);\n        vm.folders[0].children = data_res;\n      })\n      .catch( err => {\n\n      });\n    },\n    addTranslateNav(lists = []) {\n      return lists.map(v => {\n        return { ...v, name: this.$t(v.name) };\n      });\n    },\n    toggleSidebar() {\n      if(window.innerWidth<500){\n        this.$refs.sidebarToggleBtn.toggle();\n      }\n    },\n    renameFolder(folders, layer_id) {\n      let vm  = this\n      const pos = layer_id.indexOf('/', 1);\n      const no = parseInt(layer_id.substr(1, pos));\n      if(pos<0){\n        const no1 = parseInt(layer_id.substr(1));\n        if(vm.folder_op_type == \"rename\") {\n          const folder_rename = vm.folder_rename;\n          store.dispatch(FOLDER_RENAME_REQUEST, {id: folders[no1].id, doc_folder_name: folder_rename})\n          .then( res => {\n            res && res.status && this.getFolders();\n          })\n          .catch( err => {\n            console.log('err-------', err)\n          });\n        } else if(this.folder_op_type == \"new\") {\n          const folder_rename = this.folder_rename;\n          store.dispatch(FOLDER_ADD_REQUEST, {parent_id: folders[no1].id, doc_folder_name: folder_rename})\n          .then( res => {\n            res && res.status && this.getFolders();\n            // folders[no1].children.push({name: res.data.doc_folder_name, parent_id: res.data.parent_id, id: res.data.id, children: []})\n          })\n          .catch( err => {\n            console.log('err-------', err)\n          });\n        } else if(this.folder_op_type == \"remove\") {\n          let folder_remove_id = this.folder_remove_id\n          store.dispatch(FOLDER_DELETE_REQUEST, this.id_folder_del)\n          .then( res => {\n            // res && res.status && this.getFolders();\n            if( res && res.status) {\n              folders[no1].children.splice(parseInt(folder_remove_id), 1);\n            }\n          })\n          .catch( err => {\n            console.log('err-------', err)\n          });\n        }\n\n        this.folder_rename = \"\";\n      } else {\n        layer_id = layer_id.substr(pos);\n        this.renameFolder(folders[no].children, layer_id);\n      }\n    },\n    deleteFolder() {\n      this.renameFolder(this.folders, this.current_item);\n      this.$refs['delete-folder-modal'].hide();\n    },\n    openDeleteDialog(layer_id, index, id) {\n      this.current_item = layer_id;\n      this.id_folder_del = id;\n      this.$refs['delete-folder-modal'].show();\n    },\n    enterName() {\n      this.renameFolder(this.folders, this.current_item);\n      this.$refs['rename-folder-modal'].hide();\n    },\n    openRenameDialog(layer_id) {\n      this.current_item = layer_id;\n      this.$refs['rename-folder-modal'].show();\n    },\n    openMoveDialog(layer_id, id) {\n      this.current_item = layer_id;\n      this.$refs['move-folder-modal'].show();\n    },\n    moveAFolder() {\n      let folder_id = parseInt(sessionStorage.getItem('folder_id'));\n      let parent_id = parseInt(sessionStorage.getItem('parent_id'));\n      store.dispatch(FOLDER_RENAME_REQUEST, {id: folder_id, parent_id: parent_id  == 0 ? null : parent_id})\n        .then( res => {\n          this.$refs['move-folder-modal'].hide();\n          res && res.status && this.getFolders();\n        })\n        .catch( err => {\n          console.log('err-------', err)\n        });\n    },\n    getSelected(doc_type) {\n      if(doc_type == 'doc' && this.$router.history.current.fullPath == \"/payment/document-list\") {\n        return \"selected\"\n      } else if(doc_type == 'temp' && this.$router.history.current.fullPath == \"/payment/template-list\") {\n        return \"selected\"\n      }\n      return \"\";\n    },\n    clickMain(e) {\n      if (e.target.className == \"main\") {\n        this.toggleSidebar\n      }\n    },\n    gotoPage(page) {\n      this.$router.push({ path: page });\n    },\n    gotoStartPage() {\n      if(this.$route.path === \"/landing\"){\n        EventBus.$emit('IS_LANDING', true);\n      } else {\n        EventBus.$emit('IS_LANDING', false);\n      }\n      this.$router.push({\n        path: \"/docu-sign/add-document\"\n      });\n    },\n  },\n  watch: {\n    $route(to) {\n      if (to.fullPath == \"/prepare\") {\n        this.show_tool_menu = true;\n      } else {\n        this.show_tool_menu = false;\n      }\n      \n      if (this.$router.history.current.fullPath == \"/payment/document-list\") {\n        this.show_add_folder = true;\n      } else {\n        this.show_add_folder = false;\n      }\n    }\n  }\n};\n",{"version":3,"sources":["PaymentContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PaymentContainer.vue","sourceRoot":"src/containers","sourcesContent":["<template>\n  <div class=\"app\">\n    <div class=\"app-body payment-container\">\n      <AppSidebar fixed>\n        <AppLogo />\n        <div class=\"p-3 side-menu\">\n          <div class=\"sidebar-auto-scoroll\">\n            <b-button block variant=\"other\" v-on:click=\"gotoStartPage()\">\n              {{ getSelected('temp')==\"selected\" ? \"Create Template\" :  $t('layout.payment.sidebar.button')  }}\n            </b-button>\n            <b-button\n              variant=\"primary\"\n              class=\"d-block d-sm-none\"\n              block\n              style=\"padding-top: 0.5rem;\"\n              v-on:click=\"gotoPage('/payment/pricing-plan'); toggleSidebar();\"\n            >{{ $t('layout.button') }}</b-button>\n            <div class=\"prepare-tool-nav\">\n              <hr class=\"seperate-bar\" />\n              <SidebarNav :navItems=\"computedNav\"></SidebarNav>\n            </div>\n            <!-- <template  v-if=\"show_add_folder\"> -->\n              <hr class=\"seperate-bar\" />\n              <div class=\"user-sidebar-folders\">\n                <SideFolders :folders=\"folders\" :layer_id=\"''\"/>\n              </div>\n            <!-- </template> -->\n          </div>\n          <Logout></Logout>\n        </div>\n      </AppSidebar>\n      <main class=\"main\" v-on:click=\"clickMain\">\n        <AppHeader class=\"pr-3\">\n          <SidebarToggler ref=\"sidebarToggleBtn\" class=\"d-lg-none\" display=\"md\" mobile />\n          <!-- <SidebarToggler class=\"d-md-down-none\" display=\"lg\" :defaultOpen=true /> -->\n          <UpgradePlan class=\"d-none d-sm-block\"></UpgradePlan>\n          <div class=\"your-cur-plan\">\n            <span class=\"comments ml-3 mr-1\">{{ $t('layout.payment.header.comments') }}</span>\n            <span>\n              <UserIcon icon=\"smile.png\" class=\"mr-2\" />{{ $t('layout.payment.header.icon') }}\n            </span>\n          </div>\n          <div class=\"sign-doc-type\">\n            <div\n              class=\"clickable-icon mx-1 mx-1 mx-sm-2 mx-md-2 mx-lg-4\"\n              v-on:click=\"gotoPage('/payment/document-list')\"\n              v-bind:class=\"getSelected('doc')\"\n            >{{ $t('layout.payment.header.documents') }}</div>\n            <div\n              class=\"clickable-icon mx-1 mx-sm-2 mx-md-2 mx-lg-4 \"\n              v-on:click=\"gotoPage('/payment/template-list')\"\n              v-bind:class=\"getSelected('temp')\"\n            >{{ $t('layout.payment.header.templates') }}</div>\n          </div>\n          <DefaultHeaderDropdownAccnt />\n          <!--<AsideToggler class=\"d-lg-none\" mobile />-->\n        </AppHeader>\n        <div class=\"container-fluid main-container\">\n          <router-view></router-view>\n        </div>\n      </main>\n    </div>\n    <TheFooter>\n      <!--footer-->\n      <div>\n        <span class=\"ml-1\">&copy; 2019 CoffeeSign All rights reserved</span>\n      </div>\n    </TheFooter>\n    <b-modal id=\"rename-folder-modal\" ref=\"rename-folder-modal\" hide-footer centered size=\"md\">\n      <div class=\"rename-folder-modal\">\n        <div class=\"title\">{{folder_op_type==\"new\"?\"Create\":\"Rename\"}} Folder</div>\n        <div class=\"form-group\">\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"folder_rename\"\n            placeholder=\"Folder Name\"\n            name=\"folder_rename\"\n            v-model=\"folder_rename\"\n          />\n        </div>\n        <hr>\n        <b-button v-on:click=\"enterName\" variant=\"primary\" class=\"min-width-136px\">{{folder_op_type==\"new\"?\"Create\":\"Rename\"}}</b-button>\n      </div>\n    </b-modal>\n    \n    <b-modal id=\"move-folder-modal\" ref=\"move-folder-modal\" hide-footer centered size=\"md\">\n      <div class=\"rename-folder-modal\">\n        <div class=\"title\">Move Folder</div>\n        <div class=\"form-group\">\n          <SideFoldersMove :folders=\"folders\" :layer_id=\"''\" :move_id=\"move_id\"/>\n        </div>\n        <hr>\n        <b-button v-on:click=\"moveAFolder\" variant=\"primary\" class=\"min-width-136px\">Move</b-button>\n      </div>\n    </b-modal>\n    <b-modal id=\"delete-folder-modal\" ref=\"delete-folder-modal\" hide-footer centered size=\"md\">\n      <div class=\"rename-folder-modal\">\n        <div class=\"title\">Delete Folder</div>\n        <div class=\"form-group\">\n          <span>Are you sure delete folder?</span>\n        </div>\n        <hr>\n        <b-button v-on:click=\"deleteFolder\" variant=\"primary\" class=\"min-width-136px\">Delete</b-button>\n      </div>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport {\n  Header as AppHeader,\n  SidebarToggler,\n  Sidebar as AppSidebar,\n  SidebarFooter,\n  SidebarForm,\n  SidebarHeader,\n  SidebarMinimizer,\n  SidebarNav,\n  Aside as AppAside,\n  AsideToggler,\n  Footer as TheFooter,\n} from \"@coreui/vue\";\nimport DefaultHeaderDropdownAccnt from \"./DefaultHeaderDropdownAccnt\";\nimport UserIcon from \"../components/UserIcon\";\nimport UpgradePlan from \"./UpgradePlan\";\nimport Logout from \"../components/Logout\";\nimport AppLogo from \"../components/AppLogo\";\nimport SideFolders from \"../components/SideFolders\";\nimport SideFoldersMove from \"../components/SideFoldersMove\";\nimport { EventBus } from '../config/event-bus';\nimport { landingNavList } from \"../helpers/defaultValue\";\nimport { restructure } from \"../helpers/restructure\";\n\nimport store from '../store/store'\nimport { mapGetters } from \"vuex\";\nimport {\n  FOLDER_GET_REQUEST,\n  FOLDER_ADD_REQUEST,\n  FOLDER_RENAME_REQUEST,\n  FOLDER_DELETE_REQUEST\n} from \"../store/actions.type\";\n\nexport default {\n  name: \"DocumentsContainer\",\n  components: {\n    SideFolders,\n    AppLogo,\n    Logout,\n    UserIcon,\n    UpgradePlan,\n    AsideToggler,\n    AppHeader,\n    AppSidebar,\n    AppAside,\n    TheFooter,\n    DefaultHeaderDropdownAccnt,\n    SidebarForm,\n    SidebarFooter,\n    SidebarToggler,\n    SidebarHeader,\n    SidebarNav,\n    SidebarMinimizer,\n    SideFoldersMove\n  },\n  data() {\n    return {\n      show_add_folder: false,\n      current_item: '',\n      folder_rename: '',\n      folder_remove_id: 0,\n      folder_op_type: 'new',\n      nav: [\n        {\n          name: \"Account\",\n          url: \"/profile/account\",\n          icon: \"fa fa-user\"\n        },\n        {\n          name: \"Signature\",\n          url: \"/signature\",\n          icon: \"fa fa-pencil\"\n        },\n        {\n          name: \"Pricing Plan\",\n          url: \"/payment/upgrade-plan\",\n          icon: \"fa fa-tag\"\n        },\n        {\n          name: \"Branding\",\n          url: \"/profile/custom-branding\",\n          icon: \"fa fa-id-card\"\n        }\n      ],\n      folders: [{\n        id: 0,\n        name: \"Folders\",\n        parent_id: null,\n        children: []\n      }],\n      show_tool_menu: true,\n      id_folder_del: 0,\n      move_id: null,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      get_folders: 'get_folders',\n      folder_add: 'folder_add'\n    }),\n    computedNav() {\n      return this.addTranslateNav(landingNavList);\n    },\n    name() {\n      return this.$route.name;\n    },\n    list() {\n      return this.$route.matched.filter(\n        route => route.name || route.meta.label\n      );\n    }\n  },\n  created() {\n    this.getFolders()\n  },\n  mounted() {\n    if (this.$router.history.current.fullPath == \"/payment/document-list\") {\n      this.show_add_folder = true;\n    } else {\n      this.show_add_folder = false;\n    }\n    this.$root.$on('renameFolder', (layer_id, name) => {\n      this.folder_rename = name;\n      this.folder_op_type = \"rename\";\n      this.openRenameDialog(layer_id);\n    });\n    this.$root.$on('newFolder', (layer_id) => {\n      this.folder_rename = \"New Folder\";\n      this.folder_op_type = \"new\";\n      this.openRenameDialog(layer_id);\n    });\n    this.$root.$on('moveFolder', (layer_id, id) => {\n      this.folder_op_type = \"move\";\n      this.openMoveDialog(layer_id, id);\n      this.move_id = id;\n\n    });\n    this.$root.$on('removeFolder', (layer_id, index, id) => {\n      this.folder_op_type = \"remove\";\n      this.folder_remove_id = index;\n      this.openDeleteDialog(layer_id, index, id);\n      // this.renameFolder(this.folders, layer_id, id);\n    });\n    this.toggleSidebar();\n  },\n  methods: {\n    getFolders() {\n      let vm = this;\n      store.dispatch(FOLDER_GET_REQUEST)\n      .then( res => {\n        let get_folders = vm.get_folders;\n        let data_res = restructure(get_folders);\n        vm.folders[0].children = data_res;\n      })\n      .catch( err => {\n\n      });\n    },\n    addTranslateNav(lists = []) {\n      return lists.map(v => {\n        return { ...v, name: this.$t(v.name) };\n      });\n    },\n    toggleSidebar() {\n      if(window.innerWidth<500){\n        this.$refs.sidebarToggleBtn.toggle();\n      }\n    },\n    renameFolder(folders, layer_id) {\n      let vm  = this\n      const pos = layer_id.indexOf('/', 1);\n      const no = parseInt(layer_id.substr(1, pos));\n      if(pos<0){\n        const no1 = parseInt(layer_id.substr(1));\n        if(vm.folder_op_type == \"rename\") {\n          const folder_rename = vm.folder_rename;\n          store.dispatch(FOLDER_RENAME_REQUEST, {id: folders[no1].id, doc_folder_name: folder_rename})\n          .then( res => {\n            res && res.status && this.getFolders();\n          })\n          .catch( err => {\n            console.log('err-------', err)\n          });\n        } else if(this.folder_op_type == \"new\") {\n          const folder_rename = this.folder_rename;\n          store.dispatch(FOLDER_ADD_REQUEST, {parent_id: folders[no1].id, doc_folder_name: folder_rename})\n          .then( res => {\n            res && res.status && this.getFolders();\n            // folders[no1].children.push({name: res.data.doc_folder_name, parent_id: res.data.parent_id, id: res.data.id, children: []})\n          })\n          .catch( err => {\n            console.log('err-------', err)\n          });\n        } else if(this.folder_op_type == \"remove\") {\n          let folder_remove_id = this.folder_remove_id\n          store.dispatch(FOLDER_DELETE_REQUEST, this.id_folder_del)\n          .then( res => {\n            // res && res.status && this.getFolders();\n            if( res && res.status) {\n              folders[no1].children.splice(parseInt(folder_remove_id), 1);\n            }\n          })\n          .catch( err => {\n            console.log('err-------', err)\n          });\n        }\n\n        this.folder_rename = \"\";\n      } else {\n        layer_id = layer_id.substr(pos);\n        this.renameFolder(folders[no].children, layer_id);\n      }\n    },\n    deleteFolder() {\n      this.renameFolder(this.folders, this.current_item);\n      this.$refs['delete-folder-modal'].hide();\n    },\n    openDeleteDialog(layer_id, index, id) {\n      this.current_item = layer_id;\n      this.id_folder_del = id;\n      this.$refs['delete-folder-modal'].show();\n    },\n    enterName() {\n      this.renameFolder(this.folders, this.current_item);\n      this.$refs['rename-folder-modal'].hide();\n    },\n    openRenameDialog(layer_id) {\n      this.current_item = layer_id;\n      this.$refs['rename-folder-modal'].show();\n    },\n    openMoveDialog(layer_id, id) {\n      this.current_item = layer_id;\n      this.$refs['move-folder-modal'].show();\n    },\n    moveAFolder() {\n      let folder_id = parseInt(sessionStorage.getItem('folder_id'));\n      let parent_id = parseInt(sessionStorage.getItem('parent_id'));\n      store.dispatch(FOLDER_RENAME_REQUEST, {id: folder_id, parent_id: parent_id  == 0 ? null : parent_id})\n        .then( res => {\n          this.$refs['move-folder-modal'].hide();\n          res && res.status && this.getFolders();\n        })\n        .catch( err => {\n          console.log('err-------', err)\n        });\n    },\n    getSelected(doc_type) {\n      if(doc_type == 'doc' && this.$router.history.current.fullPath == \"/payment/document-list\") {\n        return \"selected\"\n      } else if(doc_type == 'temp' && this.$router.history.current.fullPath == \"/payment/template-list\") {\n        return \"selected\"\n      }\n      return \"\";\n    },\n    clickMain(e) {\n      if (e.target.className == \"main\") {\n        this.toggleSidebar\n      }\n    },\n    gotoPage(page) {\n      this.$router.push({ path: page });\n    },\n    gotoStartPage() {\n      if(this.$route.path === \"/landing\"){\n        EventBus.$emit('IS_LANDING', true);\n      } else {\n        EventBus.$emit('IS_LANDING', false);\n      }\n      this.$router.push({\n        path: \"/docu-sign/add-document\"\n      });\n    },\n  },\n  watch: {\n    $route(to) {\n      if (to.fullPath == \"/prepare\") {\n        this.show_tool_menu = true;\n      } else {\n        this.show_tool_menu = false;\n      }\n      \n      if (this.$router.history.current.fullPath == \"/payment/document-list\") {\n        this.show_add_folder = true;\n      } else {\n        this.show_add_folder = false;\n      }\n    }\n  }\n};\n</script>\n<style lang=\"scss\">\n@import \"./PaymentContainer.scss\";\n</style>"]}]}