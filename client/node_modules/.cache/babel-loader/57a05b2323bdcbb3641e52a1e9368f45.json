{"remainingRequest":"/var/www/html/Jobs/DOAN-TT/client/node_modules/babel-loader/lib/index.js!/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/Jobs/DOAN-TT/client/src/views/signaturestamp/StampSeals.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/Jobs/DOAN-TT/client/src/views/signaturestamp/StampSeals.vue","mtime":1573548269983},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/babel-loader/lib/index.js","mtime":1571304325577},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js","mtime":1571304326381}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.fontsize\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/var/www/html/Jobs/DOAN-TT/client/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.match\";\nimport _defineProperty from \"/var/www/html/Jobs/DOAN-TT/client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { html2canvas } from 'vue-html2canvas';\nimport axios from 'axios';\nimport store from \"../../store/store\";\nimport { mapGetters, mapState } from 'vuex';\nimport { stampseal } from \"../../mixins/stampseal\";\nimport { svgstyles } from \"../../utils/svgstyle\";\nimport Stamp from \"../../components/common/Stamp\";\nimport UserSelect from \"../../components/UserSelect\";\nimport ImageUpload from \"../../components/common/ImageUpload\";\nimport CustomLoader from \"../../components/common/CustomLoader\";\nimport { STAMP_GET, STAMP_CREATE, STAMP_UPLOAD, STAMP_UPDATE, STAMP_SOFTDELETE, SIGNATURE_DESTROY, AUTH_LOADING } from \"../../store/actions.type\";\nimport GenerateStampSvg from \"../../components/common/GenerateStampSvg\";\nexport default {\n  name: 'StampSeals',\n  components: {\n    UserSelect: UserSelect,\n    ImageUpload: ImageUpload,\n    Stamp: Stamp,\n    GenerateStampSvg: GenerateStampSvg\n  },\n  mixins: [stampseal, svgstyles],\n  data: function data() {\n    return {\n      user_selected_stamp: 0,\n      user_stamp: '',\n      form_data: {\n        stamp_type: 'Personnel',\n        title: 'Mr',\n        stamp_text: '',\n        font_face: '',\n        font_size: '',\n        language: 'English',\n        uploaded_url: ''\n      },\n      s_data: {\n        stamp_type: 'Personnel',\n        title: '',\n        text: '',\n        font_face: '',\n        font_size: '',\n        language: 'English',\n        uploaded_url: ''\n      },\n      generate_data: [],\n      generate_img: '',\n      stamp_file: [],\n      uploadStampImg: {},\n      validator: {\n        isError: false,\n        text: ''\n      },\n      config_val: {\n        navtab_index: 'Personnel',\n        navtab_selected: 0,\n        lang_short: 'gb',\n        languages: {\n          /** English */\n          English: [\"Mrs Saint Delafield\", \"Badhead Typeface\", \"Banthers\", \"Connoisseurs\", \"Cutepunk_Regular\", \"Elrotex Basic\", \"GreatVibes-Regular\", \"KLSweetPineappleRegular\", \"Mightype Script\", \"pops_08_REGULAR\", \"somethingwild-Regular\"],\n\n          /** Korean */\n          Korean: [\"KimNamyun\", \"KCC-eunyoung\", \"Goyang\", \"SangSangFlowerRoad\", \"InkLipquid\", \"Dovemayo-Medium\", \"SDMiSaeng\", \"HSGyoulnoonkot\", \"Jeju Hallasan\"],\n\n          /** Japanese */\n          Japanese: [\"crayon_1-1\", \"RiiPopkkR\", \"RiiT_F\", \"sjis_sp_setofont\", \"GenEiLateGoN_v2\", \"GenEiAntiquePv5-M\"]\n        },\n        fontsize: {\n          // English\n          English: [\"26\", \"29\", \"19\", \"29\", \"29\", \"14\", \"21\", \"29\", \"19\", \"18\", \"29\"],\n          // Korean\n          Korean: [\"27\", \"33\", \"22\", \"31\", \"30\", \"21\", \"34\", \"19\", \"21\"],\n          // Japanese\n          Japanese: [\"22\", \"18\", \"20\", \"21\", \"20\", \"20\"]\n        }\n      }\n    };\n  },\n  computed: _objectSpread({}, mapGetters(['USER', 'STAMPS', 'loading', 'errors'])),\n  mounted: function mounted() {\n    var vm = this;\n    vm.getStamps().then(function (response) {\n      store.dispatch(STAMP_GET, response.data.data);\n    }).catch(function (errors) {\n      console.log(errors.response);\n    });\n  },\n  methods: {\n    /** Create Personnel Stamp */\n    onCreateStamp: function onCreateStamp() {\n      var _this = this;\n\n      var vm = this;\n      store.dispatch(AUTH_LOADING, true);\n      vm.fontface().then(function (response) {\n        var width = 562,\n            height = vm.generate_data[vm.config_val.navtab_selected].language == 'English' ? '412' : '562';\n        pngBaseStamp;\n\n        if (vm.config_val.navtab_index == 'Personnel') {\n          // append style in svg\n          var defs = vm.$refs[\"generatedPers\"][vm.config_val.navtab_selected].$refs[\"childStampSvg\"].children[\"2\"],\n              styles = document.createElementNS(\"http://www.w3.org/2000/svg\", \"style\"),\n              node = document.createTextNode(response);\n          defs.appendChild(styles);\n          styles.appendChild(node);\n          var svgNode = vm.$refs[\"generatedPers\"][vm.config_val.navtab_selected].$refs.childStampSvg,\n              sStamp = new XMLSerializer().serializeToString(svgNode);\n\n          var pngBaseStamp = _this.svgToPng(sStamp, width, height, 10);\n        } else {\n          // append style in svg\n          var _defs = vm.$refs[\"generatedCorp\"][vm.config_val.navtab_selected].$refs[\"childStampSvg\"].children[\"2\"],\n              _styles = document.createElementNS(\"http://www.w3.org/2000/svg\", \"style\"),\n              _node = document.createTextNode(response);\n\n          _defs.appendChild(_styles);\n\n          _styles.appendChild(_node);\n\n          var _svgNode = vm.$refs[\"generatedCorp\"][vm.config_val.navtab_selected].$refs.childStampSvg,\n              _sStamp = new XMLSerializer().serializeToString(_svgNode);\n\n          var pngBaseStamp = _this.svgToPng(_sStamp, width, height, 10);\n        }\n\n        pngBaseStamp.then(function (response) {\n          var getGenerated = vm.generate_data[vm.config_val.navtab_selected],\n              shortformLang = getGenerated.language == 'English' ? 'gb' : getGenerated.language == 'Korean' ? 'kr' : 'jp';\n          vm.s_data = {\n            stamp_type: getGenerated.stamp_type,\n            title: getGenerated.title,\n            stamp_text: getGenerated.stamp_text,\n            font_face: getGenerated.font_face,\n            font_size: getGenerated.font_size,\n            language: shortformLang,\n            uploaded_url: response\n          };\n          vm.createStamp(vm.s_data).then(function (response) {\n            store.dispatch(STAMP_CREATE, response.data.data).then(function () {\n              vm.$toast.success({\n                title: \"Stamp Created\",\n                message: \"User's stamp have created!\"\n              });\n              vm.$refs[\"create-stamp-modal\"].hide();\n              store.dispatch(AUTH_LOADING, false);\n            });\n          });\n        });\n      }).catch(function (error) {\n        store.dispatch(AUTH_LOADING, false);\n        console.log(error);\n      });\n    },\n\n    /** Upload Stamp */\n    toggleStampUpload: function toggleStampUpload(e) {\n      var _this2 = this;\n\n      if (!e) return;\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        return _this2.uploadStampImg = e.target.result;\n      };\n\n      reader.readAsDataURL(e);\n    },\n    onUploadStamp: function onUploadStamp() {\n      var vm = this;\n      store.dispatch(AUTH_LOADING, true);\n      var s_image = {\n        image: this.uploadStampImg\n      };\n      vm.uploadStamp(s_image).then(function (response) {\n        store.dispatch(STAMP_UPLOAD, response.data.data).then(function () {\n          vm.$toast.success({\n            title: \"Stamp Uploaded\",\n            message: \"User's stamp have uploaded!\"\n          });\n          vm.$refs[\"create-stamp-modal\"].hide();\n          store.dispatch(AUTH_LOADING, false);\n        });\n      }).catch(function (errors) {\n        store.dispatch(AUTH_LOADING, false);\n        console.log(errors);\n      });\n    },\n\n    /** Show Stamp */\n    onShowStamp: function onShowStamp() {},\n\n    /** Update Stamp */\n    onDefaultStamp: function onDefaultStamp(id) {\n      var vm = this;\n      store.dispatch(AUTH_LOADING, true);\n      vm.defaultStamp(id).then(function (response) {\n        store.dispatch(STAMP_UPDATE, response.data.data).then(function () {\n          vm.$toast.success({\n            title: \"Stamp Default\",\n            message: \"User's stamp have set to default!\"\n          });\n          store.dispatch(AUTH_LOADING, false);\n        });\n      }).catch(function (errors) {\n        store.dispatch(AUTH_LOADING, false);\n        console.log(errors);\n      });\n    },\n\n    /** Delete Stamp */\n    onDeleteStamp: function onDeleteStamp(id) {\n      var vm = this;\n\n      if (confirm(\"Do you really want to delete?\")) {\n        store.dispatch(AUTH_LOADING, true);\n        vm.softDeleteStamp(id).then(function (response) {\n          store.dispatch(STAMP_SOFTDELETE, id).then(function () {\n            vm.$toast.warn({\n              title: \"Stamp Deleted\",\n              message: \"User's stamp seal have deleted!\"\n            });\n            store.dispatch(AUTH_LOADING, false);\n          });\n        }).catch(function (errors) {\n          store.dispatch(AUTH_LOADING, false);\n          console.log(errors);\n        });\n      }\n    },\n\n    /** Download Stamp */\n    onDownloadStamp: function onDownloadStamp(url) {\n      var vm = this,\n          imageURL = url,\n          canvas = document.createElement(\"canvas\"),\n          downloadedImg = new Image();\n      downloadedImg.crossOrigin = \"Anonymous\";\n\n      downloadedImg.onload = function () {\n        var context = canvas.getContext(\"2d\");\n        canvas.width = downloadedImg.width;\n        canvas.height = downloadedImg.height;\n        context.drawImage(downloadedImg, 0, 0);\n\n        try {\n          var dataURL = canvas.toDataURL(\"image/png\");\n          vm.downloadURI(dataURL, 'stamp.png');\n        } catch (err) {\n          console.log(\"Error: \" + err);\n        }\n      };\n\n      downloadedImg.src = imageURL;\n    },\n    downloadURI: function downloadURI(uri, name) {\n      var link = document.createElement('a');\n      link.download = name;\n      link.href = uri;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    },\n\n    /** Utils */\n\n    /**\n    * converts an svg string to base64 png using the domUrl\n    * @param {string} svgText the svgtext\n    * @param {number} [margin=0] the width of the border - the image size will be height+margin by width+margin\n    * @param {string} [fill] optionally backgrund canvas fill\n    * @return {Promise} a promise to the bas64 png image\n    */\n    svgToPng: function svgToPng(svgText, setWidth, setHeight, margin, fill) {\n      // convert an svg text to png using the browser\n      return new Promise(function (resolve, reject) {\n        try {\n          // can use the domUrl function from the browser\n          var domUrl = window.URL || window.webkitURL || window;\n\n          if (!domUrl) {\n            throw new Error(\"(browser doesnt support this)\");\n          } // figure out the height and width from svg text\n\n\n          var match = svgText.match(/height=\\\"(\\d+)/m);\n          var height = match && match[1] ? parseInt(match[1], 10) : 100;\n          var match = svgText.match(/width=\\\"(\\d+)/m);\n          var width = match && match[1] ? parseInt(match[1], 10) : 400;\n          margin = margin || 0;\n          width = parseInt(setWidth);\n          height = parseInt(setHeight); // it needs a namespace\n\n          if (!svgText.match(/xmlns=\\\"/mi)) {\n            svgText = svgText.replace('<svg ', '<svg xmlns=\"http://www.w3.org/2000/svg\" ');\n          } // create a canvas element to pass through\n\n\n          var canvas = document.createElement(\"canvas\");\n          canvas.width = width + margin * 2;\n          canvas.height = height + margin * 2;\n          var ctx = canvas.getContext(\"2d\"); // make a blob from the svg\n\n          var svg = new Blob([svgText], {\n            type: \"image/svg+xml;charset=utf-8\"\n          }); // create a dom object for that image\n\n          var url = domUrl.createObjectURL(svg); // create a new image to hold it the converted type\n\n          var img = new Image(); // when the image is loaded we can get it as base64 url\n\n          img.onload = function () {\n            // draw it to the canvas\n            ctx.drawImage(this, margin, margin); // if it needs some styling, we need a new canvas\n\n            if (fill) {\n              var styled = document.createElement(\"canvas\");\n              styled.width = canvas.width;\n              styled.height = canvas.height;\n              var styledCtx = styled.getContext(\"2d\");\n              styledCtx.save();\n              styledCtx.fillStyle = fill;\n              styledCtx.fillRect(0, 0, canvas.width, canvas.height);\n              styledCtx.strokeRect(0, 0, canvas.width, canvas.height);\n              styledCtx.restore();\n              styledCtx.drawImage(canvas, 0, 0);\n              canvas = styled;\n            } // we don't need the original any more\n\n\n            domUrl.revokeObjectURL(url); // now we can resolve the promise, passing the base64 url\n\n            resolve(canvas.toDataURL());\n          }; // load the image\n\n\n          img.src = url;\n        } catch (err) {\n          reject('failed to convert svg to png ' + err);\n        }\n      });\n    },\n    onGenerateStamp: function () {\n      var _onGenerateStamp = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var vm, lang, langFace, langSize;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                vm = this;\n                store.dispatch(AUTH_LOADING, true); // Clear old generated_data\n\n                vm.generate_data.splice(0, vm.generate_data.length);\n                vm.config_val.navtab_selected = 0;\n                _context.next = 6;\n                return vm.$nextTick();\n\n              case 6:\n                // wait to clear\n                lang = vm.form_data.language;\n                langFace = vm.config_val.languages[lang];\n                langSize = vm.config_val.fontsize[lang];\n                langFace.forEach(function (face, index) {\n                  var generate = {\n                    stamp_type: vm.config_val.navtab_index,\n                    title: vm.form_data.title,\n                    stamp_text: vm.form_data.stamp_text,\n                    font_face: face,\n                    font_size: langSize[index],\n                    language: lang,\n                    uploaded_url: '',\n                    etc: {\n                      position: '',\n                      company: ''\n                    }\n                  };\n                  vm.generate_data.push(generate);\n                });\n                store.dispatch(AUTH_LOADING, false);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function onGenerateStamp() {\n        return _onGenerateStamp.apply(this, arguments);\n      }\n\n      return onGenerateStamp;\n    }(),\n    onSyncLanguage: function onSyncLanguage(e) {\n      this.form_data.language = e;\n      this.config_val.lang_short = this.form_data.language == 'English' ? 'gb' : this.form_data.language == 'Korean' ? 'kr' : 'jp';\n    },\n    onSyncTab: function onSyncTab(e) {\n      this.config_val.navtab_index = e;\n      this.clearGenerated();\n    },\n    onValidateInput: function onValidateInput() {\n      if (this.form_data.language == 'English') {\n        if (this.form_data.stamp_text.length >= 25) {\n          this.validator.isError = true;\n          this.validator.text = 'Only can generate less than 25 characters';\n        } else {\n          this.validator.isError = false;\n          this.validator.text = '';\n        }\n      } else if (this.form_data.language == 'Korean' || this.form_data.language == 'Japanese') {\n        if (this.form_data.stamp_text.length >= 9) {\n          this.validator.isError = true;\n          this.validator.text = 'Only can generate less than 9 characters';\n        } else {\n          this.validator.isError = false;\n          this.validator.text = '';\n        }\n      } else {\n        this.validator.isError = false;\n        this.validator.text = '';\n      }\n    },\n    showStampModal: function showStampModal() {\n      this.$refs[\"create-stamp-modal\"].show();\n    },\n    hideStampModal: function hideStampModal() {\n      this.$refs[\"create-stamp-modal\"].hide();\n      this.clearGenerated();\n    },\n    clearSForm: function clearSForm() {\n      Object.assign(this.$data, this.$options.data.apply(this));\n    },\n    clearGenerated: function clearGenerated() {\n      this.config_val.navtab_selected = 0;\n      this.form_data.stamp_text = '';\n      this.generate_data.splice(0, this.generate_data.length);\n    },\n    // Timeout Delay\n    onDelay: function onDelay(fn, ms) {\n      var timer = 0;\n      return function () {\n        clearTimeout(timer);\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        timer = setTimeout(fn.bind.apply(fn, [this].concat(args)), ms || 0);\n      };\n    }\n  }\n};",{"version":3,"sources":["StampSeals.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"px-sm-1 px-2\">\n    <!-- HEADER -->\n    <div class=\"row px-1\">\n      <div class=\"col-12 px-1\">\n        <div class=\"content-card\">\n          <div class=\"content\">\n            <div class=\"d-flex align-items-center\">\n              <img src=\"img/icons/stamp.svg\" />\n              <div class=\"ml-3\">\n                <div class=\"header\">{{ $t(\"signature.headerStamp\") }}</div>\n                <div class=\"comments\">{{ $t('signature.commentStamp') }}</div>\n              </div>\n            </div>\n            <b-button variant=\"primary\" v-on:click=\"showStampModal\">{{ $t('signature.button.addStamp') }}</b-button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- END HEADER -->\n\n    <!-- LISTING STAMPS -->\n    <div class=\"row px-1\">\n      <div class=\"col-sm px-1\" v-for=\"stamp in STAMPS\" :key=\"stamp.id\">\n        <div class=\"stamp-related\">\n        <div class=\"content-card signatures px-md-3 px-2\">          \n          <!-- List here -->\n          <div class=\"listing-stamp sign-result\" style=\"overflow: hidden;\">\n            <img :src=\"stamp.uploaded_url\" alt=\"Uploaded Image\" style=\"width: auto; height: 120px;\" />\n          </div>\n\n          <!--\n          <Stamp v-else \n            v-bind:key=\"stamp.id\" \n              :keyItem=\"stamp.id\" \n              :paramStamp=\"({\n                stamp_type: stamp.stamp_type,\n                stamp_title: stamp.title,\n                stamp_text: stamp.text,\n                font_face: stamp.font_face,\n                font_size: stamp.font_size,\n                uploaded_url: stamp.uploaded_url,\n                etc: {\n                  position: '',\n                  company: ''\n                }\n              })\"\n              :configStamp=\"({\n                language: stamp.language,\n                str_length: '',\n                display_name: ''\n              })\"\n              :classChecked=\"''\" \n              :btnClickHandler=\"() => { return }\"\n          />\n          -->\n\n          <div class=\"actions\">\n            <div class=\"action clickable-icon\" v-on:click=\"onDefaultStamp(stamp.id)\">\n              <i class=\"fa fa-pencil pr-2\"></i> {{ $t('signature.button.setdefault') }}\n            </div>\n            <div class=\"action clickable-icon\" v-on:click=\"onDownloadStamp(stamp.uploaded_url)\">\n              <i class=\"fa fa-download pr-2\"></i> {{ $t('signature.button.download') }}\n            </div>\n            <div class=\"action clickable-icon\" v-on:click=\"onDeleteStamp(stamp.id)\">\n              <i class=\"fa fa-trash pr-2\"></i> {{ $t('signature.button.delete') }}\n            </div>\n          </div>\n        </div>\n        </div>\n      </div>\n    </div>\n    <!-- END LISTING STAMPS -->\n    \n    <!-- MODAL -->\n    <b-modal \n      id=\"create-stamp-modal\" \n      ref=\"create-stamp-modal\" \n      hide-footer size=\"xl\" \n      :no-close-on-backdrop=\"true\" \n      :no-close-on-esc=\"true\"\n      :hide-header-close=\"true\">\n      <div class=\"create-signature-modal\">\n        <div class=\"title\">\n          {{ $t('signature.modal.titleStamp') }}\n        </div>\n        <!-- Tab Menu -->\n        <div class=\"row mb-md-4 mb-2\">\n          <div class=\"col-4 pr-0 pr-md-3\">\n            <b-button\n              class=\"stamp-tab-nav\"\n              :variant=\"config_val.navtab_index == 'Personnel' ? 'primary' : 'outline-primary'\"\n              v-on:click=\"onSyncTab('Personnel')\" \n              block\n            >\n              {{ $t('signature.modal.tab.personnelSeal') }}\n            </b-button>\n          </div>\n          <div class=\"col-4 px-2 px-md-3\">\n            <b-button\n              class=\"stamp-tab-nav\"\n              :variant=\"config_val.navtab_index == 'Corporate' ? 'primary' : 'outline-primary'\"\n              v-on:click=\"onSyncTab('Corporate')\"\n              block\n            >\n              {{ $t('signature.modal.tab.corporateSeal') }}\n            </b-button>\n          </div>\n          <div class=\"col-4 pl-0 pl-md-3\">\n            <b-button\n              class=\"stamp-tab-nav\"\n              :variant=\"config_val.navtab_index == 'Upload' ? 'primary' : 'outline-primary'\"\n              v-on:click=\"onSyncTab('Upload')\"\n              block\n            >\n              {{ $t('signature.modal.tab.upload') }}\n            </b-button>\n          </div>\n        </div>\n        <!-- End Tab Menu -->\n        \n        <!-- Generate Stamp Seal -->\n        <div>\n          <div class=\"row mb-4\" v-if=\"config_val.navtab_index == 'Personnel'\">\n            <div class=\"col px-sm-3 px-1\">\n              <hr />\n              <!-- Forms -->\n              <div class=\"row mb-1\">\n                <!-- Select Language -->\n                <div class=\"col-lg-2 col-12 pr-lg-1\">\n                  <UserSelect\n                    v-bind:value=\"form_data.language\"\n                    v-bind:items=\"['English', 'Korean', 'Japanese']\"\n                    v-model=\"form_data.language\"\n                    @changeValue=\"onSyncLanguage\"\n                  />\n                </div>\n                <!-- Select Title -->\n                <div class=\"col-lg-2 col-sm-3 col-4 px-lg-1 pr-1\" hidden>\n                  <UserSelect\n                    v-bind:value=\"form_data.title\"\n                    v-bind:items=\"['Mr', 'Mrs', 'Ms', 'Miss', 'Dr', 'Prof']\"\n                    v-model=\"form_data.title\"\n                    @changeValue=\"form_data.title = $event\"\n                  />\n                </div>\n                <!-- Input Name -->\n                <div class=\"col-lg-8 col-12 px-lg-1 px-auto\">\n                  <div class=\"form-group\">\n                    <input\n                      type=\"text\"\n                      :class=\"{\n                        'form-control': true,\n                        'input-invalid': (form_data.language == 'English' ? (form_data.stamp_text.length >= 25) : (form_data.stamp_text.length >= 9)),\n                        'input-valid': (form_data.language == 'English' ? (form_data.stamp_text.length < 25) : (form_data.stamp_text.length < 9))\n                      }\"\n                      id=\"stamp_text\"\n                      name=\"stamp_text\"\n                      v-model=\"form_data.stamp_text\"\n                      :placeholder=\"$t('signature.modal.placeholderStamp')\"\n                      :maxlength=\"form_data.language == 'English' ? 25 : 9\"\n                      @changeValue=\"form_data.stamp_text = $event\"\n                      v-on:keyup=\"onValidateInput\"\n                    />\n                    <p v-if=\"validator.isError\" class=\"validation-error text-left pl-2\">\n                      {{validator.text}}\n                    </p>\n                  </div>\n                </div>\n\n                <!-- Generate Button -->\n                <div class=\"col-lg-2 col-12 pl-lg-1\">\n                  <b-button variant=\"primary\" block v-on:click=\"onGenerateStamp\">{{ $t('signature.button.generate') }}</b-button>\n                </div>\n              </div>\n\n              <!-- Generated Stamp Seal -->              \n              <div class=\"stamp-related\">\n                <div class=\"signatures px-2 scroll-box\">\n                  <div v-if=\"generate_data.length\" class=\"row\">\n                    <div class=\"col-lg-4 col-12 my-3\" \n                      v-bind:key=\"index\"\n                      v-for=\"(item, index) in generate_data\">\n                      <div \n                        :class=\"{\n                          'listing-stamp sign-result': true,\n                          'checked': index == config_val.navtab_selected\n                        }\"\n                        @click=\"config_val.navtab_selected = index\"\n                      >\n                        <GenerateStampSvg\n                          ref=\"generatedPers\"\n                          :paramsData=\"{\n                            idData: index,\n                            type: 'Personnel',\n                            text: item.stamp_text,\n                            lang: item.language == 'English' ? 'gb' : item.language == 'Korean' ? 'kr' : 'jp'\n                          }\" \n                        />\n\n                      <!--\n                        <span class=\"p-2\" ref=\"generatedPers\">\n                          <Stamp\n                            v-bind:key=\"index\"\n                            :paramStamp=\"item\"\n                            :configStamp=\"{\n                              language: item.language == 'English' ? 'gb' : item.language == 'Korean' ? 'kr' : 'jp'\n                            }\"\n                            :classChecked=\"(index == config_val.navtab_selected?'checked':'')\" :btnClickHandler=\"() => {config_val.navtab_selected = index}\"\n                          />\n                        </span>\n                      -->\n                        \n                        <div v-if=\"index == config_val.navtab_selected\" class=\"check-box text-left\">\n                          <img src=\"img/icons/check-2.svg\" />\n                        </div>\n                      </div>\n\n\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row mb-4\" v-else-if=\"config_val.navtab_index == 'Corporate'\">\n            <div class=\"col px-sm-3 px-1\">\n              <hr />\n              <!-- Forms -->\n              <div class=\"row mb-1\">\n                <!-- Select Language -->\n                <div class=\"col-lg-2 col-md-4 pr-md-1\">\n                  <UserSelect\n                    v-bind:value=\"form_data.language\"\n                    v-bind:items=\"['English', 'Korean', 'Japanese']\"\n                    v-model=\"form_data.language\"\n                    @changeValue=\"onSyncLanguage\"\n                  />\n                </div>\n                <!-- Input Name -->\n                <div class=\"col-md pl-md-1\">\n                  <div class=\"form-group\">\n                    <input\n                      type=\"text\"\n                      :class=\"{\n                        'form-control': true,\n                        'input-invalid': (form_data.language == 'English' ? (form_data.stamp_text.length >= 25) : (form_data.stamp_text.length >= 9)),\n                        'input-valid': (form_data.language == 'English' ? (form_data.stamp_text.length < 25) : (form_data.stamp_text.length < 9))\n                      }\"\n                      id=\"stamp_text\"\n                      name=\"stamp_text\"\n                      v-model=\"form_data.stamp_text\"\n                      :placeholder=\"$t('signature.modal.placeholderStamp')\"\n                      :maxlength=\"form_data.language == 'English' ? 25 : 9\"\n                      @changeValue=\"form_data.stamp_text = $event\"\n                      v-on:keyup=\"onValidateInput\"\n                    />\n                    <p v-if=\"validator.isError\" class=\"validation-error text-left pl-2\">\n                      {{validator.text}}\n                    </p>\n                  </div>\n                </div>\n\n                <!-- Generate Button -->\n                <div class=\"col-lg-2 col-12 pl-lg-1\">\n                  <b-button variant=\"primary\" block v-on:click=\"onGenerateStamp\">{{ $t('signature.button.generate') }}</b-button>\n                </div>\n              </div>\n\n              <!-- Generated Stamp Seal -->\n              <div class=\"stamp-related\">\n                <div class=\"signatures px-2 scroll-box\">\n                  <div v-if=\"generate_data.length\" class=\"row\">\n                    <div class=\"col-lg-4 col-12 my-3\" \n                      v-bind:key=\"index\"\n                      v-for=\"(item, index) in generate_data\">\n                      <div \n                        :class=\"{\n                          'listing-stamp sign-result': true,\n                          'checked': index == config_val.navtab_selected\n                        }\"\n                        @click=\"config_val.navtab_selected = index\"\n                      >\n                      \n                        <GenerateStampSvg\n                          ref=\"generatedCorp\"\n                          :paramsData=\"{\n                            idData: index,\n                            type: 'Corporate',\n                            text: item.stamp_text,\n                            lang: item.language == 'English' ? 'gb' : item.language == 'Korean' ? 'kr' : 'jp'\n                          }\" \n                        />\n                      \n                      <!--\n                        <span class=\"p-2\" ref=\"generatedCorp\">\n                          <Stamp\n                            v-bind:key=\"index\"\n                            :paramStamp=\"item\"\n                            :configStamp=\"{\n                              language: item.language == 'English' ? 'gb' : item.language == 'Korean' ? 'kr' : 'jp'\n                            }\"\n                            :classChecked=\"(index == config_val.navtab_selected?'checked':'')\" :btnClickHandler=\"() => {config_val.navtab_selected = index}\"\n                          />\n                        </span>\n                      -->\n\n                        <div v-if=\"index == config_val.navtab_selected\" class=\"check-box text-left\">\n                          <img src=\"img/icons/check-2.svg\" />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <!-- Upload Stamp -->\n          <div class=\"row mb-4\" v-else>\n            <div class=\"col\">\n              <hr />\n              <!-- Forms -->\n              <ImageUpload \n                v-bind:files=\"stamp_file\" \n                v-bind:config_file=\"({\n                  img: 'img/icons/upload.svg',\n                  text: $t('signature.modal.uploadStamp')\n                })\"\n                v-on:toggle=\"toggleStampUpload($event)\" \n              />\n            </div>\n          </div>\n        \n          <hr />\n\n          <div class=\"footer\">\n            <div class=\"summary\">\n              {{ $t('signature.modal.tncStamp') }}\n            </div>\n            <div class=\"buttons\">\n              <b-button variant=\"link\" v-on:click=\"hideStampModal\">\n                <span>\n                  <i class=\"fa fa-close\"></i> {{ $t('signature.button.cancel') }}\n                </span>\n              </b-button>\n\n              <div v-if=\"config_val.navtab_index != 'Upload'\">\n                <b-button variant=\"primary\" v-on:click=\"onCreateStamp\">{{ $t('signature.button.create') }}</b-button>\n              </div>\n              <div v-else>\n                <b-button variant=\"primary\" v-on:click=\"onUploadStamp\">{{ $t('signature.button.create') }}</b-button>\n              </div>\n              \n            </div>\n          </div>\n        </div>\n      </div>\n    </b-modal>\n    <!-- END MODAL -->\n  </div>\n</template>\n\n<script>\nimport { html2canvas } from 'vue-html2canvas'\nimport axios from 'axios'\nimport store from '../../store/store'\nimport { mapGetters, mapState } from 'vuex'\nimport { stampseal } from '../../mixins/stampseal'\nimport { svgstyles } from '../../utils/svgstyle'\nimport Stamp from '../../components/common/Stamp'\nimport UserSelect from '../../components/UserSelect'\nimport ImageUpload from '../../components/common/ImageUpload'\nimport CustomLoader from '../../components/common/CustomLoader'\nimport { \n  STAMP_GET, \n  STAMP_CREATE,\n  STAMP_UPLOAD,\n  STAMP_UPDATE, \n  STAMP_SOFTDELETE, \n  SIGNATURE_DESTROY, \n  AUTH_LOADING \n} from '../../store/actions.type'\nimport GenerateStampSvg from '../../components/common/GenerateStampSvg'\n\nexport default {\n  name: 'StampSeals',\n  components: {\n    UserSelect, ImageUpload,\n    Stamp, GenerateStampSvg\n  },\n  mixins: [stampseal, svgstyles],\n  data() {\n    return {\n      user_selected_stamp: 0,\n      user_stamp: '',\n\n      form_data: {\n        stamp_type: 'Personnel',\n        title: 'Mr',\n        stamp_text: '',\n        font_face: '',\n        font_size: '',\n        language: 'English',\n        uploaded_url: ''\n      },\n      s_data: {\n        stamp_type: 'Personnel',\n        title: '',\n        text: '',\n        font_face: '',\n        font_size: '',\n        language: 'English',\n        uploaded_url: ''\n      },\n      generate_data: [],\n      generate_img: '',\n\n      stamp_file: [],\n      uploadStampImg: {},\n\n      validator: {\n        isError: false,\n        text: ''\n      },\n\n      config_val: {\n        navtab_index: 'Personnel',\n        navtab_selected: 0,\n        lang_short: 'gb',\n        languages: {\n          /** English */\n          English: [\"Mrs Saint Delafield\", \"Badhead Typeface\", \"Banthers\", \"Connoisseurs\", \"Cutepunk_Regular\", \"Elrotex Basic\", \"GreatVibes-Regular\", \"KLSweetPineappleRegular\", \"Mightype Script\", \"pops_08_REGULAR\", \"somethingwild-Regular\"],\n          /** Korean */\n          Korean: [\"KimNamyun\", \"KCC-eunyoung\", \"Goyang\", \"SangSangFlowerRoad\", \"InkLipquid\", \"Dovemayo-Medium\", \"SDMiSaeng\", \"HSGyoulnoonkot\", \"Jeju Hallasan\"],\n          /** Japanese */\n          Japanese: [\"crayon_1-1\", \"RiiPopkkR\", \"RiiT_F\", \"sjis_sp_setofont\", \"GenEiLateGoN_v2\", \"GenEiAntiquePv5-M\"]\n        },\n        fontsize: {\n          // English\n          English: [\"26\", \"29\", \"19\", \"29\", \"29\", \"14\", \"21\", \"29\", \"19\", \"18\", \"29\"],\n          // Korean\n          Korean: [\"27\", \"33\", \"22\", \"31\", \"30\", \"21\", \"34\", \"19\", \"21\"],\n          // Japanese\n          Japanese: [\"22\", \"18\", \"20\", \"21\", \"20\", \"20\"]\n        }\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(['USER', 'STAMPS', 'loading', 'errors'])\n  },\n  mounted() {\n    var vm = this\n\n    vm.getStamps()\n      .then(response => {\n        store.dispatch(STAMP_GET, response.data.data)\n      })\n      .catch(errors => {\n        console.log(errors.response)\n      });\n  },\n  methods: {\n    /** Create Personnel Stamp */\n    onCreateStamp: function () { \n      var vm = this\n\n      store.dispatch(AUTH_LOADING, true)\n\n      \n      vm.fontface()\n        .then(response => {          \n          var width = 562,\n            height = vm.generate_data[vm.config_val.navtab_selected].language == 'English' ? '412' : '562'\n            pngBaseStamp\n\n          if (vm.config_val.navtab_index == 'Personnel') {\n            // append style in svg\n            let defs = vm.$refs[\"generatedPers\"][vm.config_val.navtab_selected].$refs[\"childStampSvg\"].children[\"2\"],\n                styles = document.createElementNS(\"http://www.w3.org/2000/svg\", \"style\"),\n                node = document.createTextNode(response);              \n            defs.appendChild(styles);\n            styles.appendChild(node);\n\n            let svgNode = vm.$refs[\"generatedPers\"][vm.config_val.navtab_selected].$refs.childStampSvg,\n              sStamp = new XMLSerializer().serializeToString(svgNode)\n\n            var pngBaseStamp = this.svgToPng(sStamp, width, height, 10)\n          }\n          else {\n            // append style in svg\n            let defs = vm.$refs[\"generatedCorp\"][vm.config_val.navtab_selected].$refs[\"childStampSvg\"].children[\"2\"],\n                styles = document.createElementNS(\"http://www.w3.org/2000/svg\", \"style\"),\n                node = document.createTextNode(response);              \n            defs.appendChild(styles);\n            styles.appendChild(node);\n\n            let svgNode = vm.$refs[\"generatedCorp\"][vm.config_val.navtab_selected].$refs.childStampSvg,\n              sStamp = new XMLSerializer().serializeToString(svgNode)\n          \n            var pngBaseStamp = this.svgToPng(sStamp, width, height, 10)\n          }\n\n          pngBaseStamp.then(response => {\n            let getGenerated = vm.generate_data[vm.config_val.navtab_selected],\n              shortformLang = getGenerated.language == 'English' ? 'gb' : getGenerated.language == 'Korean' ? 'kr' : 'jp'\n\n            vm.s_data = {\n              stamp_type: getGenerated.stamp_type,\n              title: getGenerated.title,\n              stamp_text: getGenerated.stamp_text,\n              font_face: getGenerated.font_face,\n              font_size: getGenerated.font_size,\n              language: shortformLang,\n              uploaded_url: response\n            }\n\n            vm.createStamp(vm.s_data)\n              .then(response => {\n                store.dispatch(STAMP_CREATE, response.data.data)\n                  .then(() => {\n                    vm.$toast.success({\n                      title: \"Stamp Created\",\n                      message: \"User's stamp have created!\"\n                    });\n\n                    vm.$refs[\"create-stamp-modal\"].hide();\n                    store.dispatch(AUTH_LOADING, false)\n                  })\n              })\n          })      \n      })\n      .catch(error => {\n        store.dispatch(AUTH_LOADING, false)\n        console.log(error)\n      })\n    },\n\n    /** Upload Stamp */\n    toggleStampUpload: function (e) {\n      if (!e) return\n\n      let reader = new FileReader();\n      reader.onload = e => this.uploadStampImg = e.target.result\n      reader.readAsDataURL(e)\n    },\n    onUploadStamp: function () {\n      var vm = this\n      \n      store.dispatch(AUTH_LOADING, true)\n\n      let s_image = {\n        image: this.uploadStampImg\n      }\n\n      vm.uploadStamp(s_image)\n        .then(response => {\n          store.dispatch(STAMP_UPLOAD, response.data.data)\n            .then(() => {\n              vm.$toast.success({\n                title: \"Stamp Uploaded\",\n                message: \"User's stamp have uploaded!\"\n              });\n\n              vm.$refs[\"create-stamp-modal\"].hide();\n              store.dispatch(AUTH_LOADING, false)\n            })\n        })\n        .catch(errors => {\n          store.dispatch(AUTH_LOADING, false)\n          console.log(errors)\n        })\n    },\n\n    /** Show Stamp */\n    onShowStamp: function () { },\n\n    /** Update Stamp */\n    onDefaultStamp: function (id) {\n      var vm = this\n\n      store.dispatch(AUTH_LOADING, true)\n\n      vm.defaultStamp(id)\n        .then(response => {\n          store.dispatch(STAMP_UPDATE, response.data.data)\n            .then(() => {\n              vm.$toast.success({\n                title: \"Stamp Default\",\n                message: \"User's stamp have set to default!\"\n              })\n              \n              store.dispatch(AUTH_LOADING, false)\n            })\n        })\n        .catch(errors => {\n          store.dispatch(AUTH_LOADING, false)\n          console.log(errors)\n        })      \n    },\n\n    /** Delete Stamp */\n    onDeleteStamp: function (id) { \n      var vm = this\n\n      if (confirm(\"Do you really want to delete?\")) {\n        store.dispatch(AUTH_LOADING, true)\n\n        vm.softDeleteStamp(id)\n          .then(response => {\n            store.dispatch(STAMP_SOFTDELETE, id)\n              .then(() => {\n                vm.$toast.warn({\n                  title: \"Stamp Deleted\",\n                  message: \"User's stamp seal have deleted!\"\n                })\n\n                store.dispatch(AUTH_LOADING, false)\n              })\n          })\n          .catch(errors => {\n            store.dispatch(AUTH_LOADING, false)\n            console.log(errors)\n          })\n      }\n    },\n\n    /** Download Stamp */\n    onDownloadStamp: function (url) {\n      let vm = this,\n          imageURL = url, \n          canvas = document.createElement(\"canvas\"),\n          downloadedImg = new Image\n\n      downloadedImg.crossOrigin = \"Anonymous\";\n      downloadedImg.onload = function () {\n        let context = canvas.getContext(\"2d\");\n\n        canvas.width = downloadedImg.width;\n        canvas.height = downloadedImg.height;\n      \n        context.drawImage(downloadedImg, 0, 0);\n      \n        try {\n          let dataURL = canvas.toDataURL(\"image/png\")\n          vm.downloadURI(dataURL, 'stamp.png')\n        }\n        catch(err) {\n          console.log(\"Error: \" + err);\n        }  \n      }\n      downloadedImg.src = imageURL;\n    },\n    downloadURI: function (uri, name) {\n      var link = document.createElement('a');\n      link.download = name;\n      link.href = uri;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    },\n    \n    \n\n\n\n    /** Utils */\n    /**\n    * converts an svg string to base64 png using the domUrl\n    * @param {string} svgText the svgtext\n    * @param {number} [margin=0] the width of the border - the image size will be height+margin by width+margin\n    * @param {string} [fill] optionally backgrund canvas fill\n    * @return {Promise} a promise to the bas64 png image\n    */\n    svgToPng: function (svgText, setWidth, setHeight, margin, fill) {\n      // convert an svg text to png using the browser\n      return new Promise(function(resolve, reject) {\n        try {\n          // can use the domUrl function from the browser\n          var domUrl = window.URL || window.webkitURL || window;\n          if (!domUrl) {\n            throw new Error(\"(browser doesnt support this)\")\n          }\n          \n          // figure out the height and width from svg text\n          var match = svgText.match(/height=\\\"(\\d+)/m);\n          var height = match && match[1] ? parseInt(match[1],10) : 100;\n          var match = svgText.match(/width=\\\"(\\d+)/m);\n          var width = match && match[1] ? parseInt(match[1],10) : 400;\n          margin = margin || 0;\n\n          width = parseInt(setWidth);\n          height = parseInt(setHeight);\n          \n          // it needs a namespace\n          if (!svgText.match(/xmlns=\\\"/mi)){\n            svgText = svgText.replace ('<svg ','<svg xmlns=\"http://www.w3.org/2000/svg\" ') ;  \n          }\n          \n          // create a canvas element to pass through\n          var canvas = document.createElement(\"canvas\");\n          canvas.width = width+margin*2;\n          canvas.height = height+margin*2;\n          var ctx = canvas.getContext(\"2d\");        \n          \n          // make a blob from the svg\n          var svg = new Blob([svgText], {\n            type: \"image/svg+xml;charset=utf-8\"\n          });\n          \n          // create a dom object for that image\n          var url = domUrl.createObjectURL(svg);\n          \n          // create a new image to hold it the converted type\n          var img = new Image;\n          \n          // when the image is loaded we can get it as base64 url\n          img.onload = function() {\n            // draw it to the canvas\n            ctx.drawImage(this, margin, margin);\n            \n            // if it needs some styling, we need a new canvas\n            if (fill) {\n              var styled = document.createElement(\"canvas\");\n              styled.width = canvas.width;\n              styled.height = canvas.height;\n              var styledCtx = styled.getContext(\"2d\");\n              styledCtx.save();\n              styledCtx.fillStyle = fill;   \n              styledCtx.fillRect(0,0,canvas.width,canvas.height);\n              styledCtx.strokeRect(0,0,canvas.width,canvas.height);\n              styledCtx.restore();\n              styledCtx.drawImage (canvas, 0,0);\n              canvas = styled;\n            }\n            // we don't need the original any more\n            domUrl.revokeObjectURL(url);\n            // now we can resolve the promise, passing the base64 url\n            resolve(canvas.toDataURL());\n          };\n          \n          // load the image\n          img.src = url;\n          \n        } catch (err) {\n          reject('failed to convert svg to png ' + err);\n        }\n      })\n    },\n\n    onGenerateStamp: async function () {\n      var vm = this\n      \n      store.dispatch(AUTH_LOADING, true)\n      \n      // Clear old generated_data\n      vm.generate_data.splice(0, vm.generate_data.length)\n      vm.config_val.navtab_selected = 0\n      await vm.$nextTick() // wait to clear\n\n      let lang = vm.form_data.language\n      let langFace = vm.config_val.languages[lang]\n      let langSize = vm.config_val.fontsize[lang]\n\n      langFace.forEach((face, index) => {\n          let generate = {\n            stamp_type: vm.config_val.navtab_index,\n            title: vm.form_data.title,\n            stamp_text: vm.form_data.stamp_text,\n            font_face: face,\n            font_size: langSize[index],\n            language: lang,\n            uploaded_url: '',\n            etc: {\n              position: '',\n              company: ''\n            }\n          }\n          vm.generate_data.push(generate)\n        })\n      \n      store.dispatch(AUTH_LOADING, false)\n    },\n    onSyncLanguage: function(e) {\n      this.form_data.language = e\n\n      this.config_val.lang_short = this.form_data.language == 'English' ? 'gb' : this.form_data.language == 'Korean' ? 'kr' : 'jp'\n    },\n    onSyncTab : function (e) {\n      this.config_val.navtab_index = e\n\n      this.clearGenerated()\n    },\n    onValidateInput: function () {\n      if (this.form_data.language == 'English') {\n        if (this.form_data.stamp_text.length >= 25) {\n          this.validator.isError = true\n          this.validator.text = 'Only can generate less than 25 characters'\n        }\n        else {\n          this.validator.isError = false\n          this.validator.text = ''\n        }  \n      }\n      else if (this.form_data.language == 'Korean' || this.form_data.language == 'Japanese') {\n        if (this.form_data.stamp_text.length >= 9) {\n          this.validator.isError = true\n          this.validator.text = 'Only can generate less than 9 characters'\n        }\n        else {\n          this.validator.isError = false\n          this.validator.text = ''\n        }\n      }\n      else {\n        this.validator.isError = false\n        this.validator.text = ''\n      }      \n    },\n    showStampModal: function () {\n      this.$refs[\"create-stamp-modal\"].show()  \n    },\n    hideStampModal: function () {\n      this.$refs[\"create-stamp-modal\"].hide()\n      this.clearGenerated()\n    },\n    clearSForm() {\n      Object.assign(this.$data, this.$options.data.apply(this))\n    },\n    clearGenerated() {\n      this.config_val.navtab_selected = 0\n      this.form_data.stamp_text = ''\n\n      this.generate_data.splice(0, this.generate_data.length)\n    },\n    // Timeout Delay\n    onDelay (fn, ms) {\n      let timer = 0\n      return function(...args) {\n        clearTimeout(timer)\n        timer = setTimeout(fn.bind(this, ...args), ms || 0)\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.scroll-box {\n  max-height: 350px;\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n</style>"],"sourceRoot":"src/views/signaturestamp"}]}