{"remainingRequest":"/var/www/html/Jobs/DOAN-TT/client/node_modules/babel-loader/lib/index.js!/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/Jobs/DOAN-TT/client/src/components/connect/Dropbox.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/Jobs/DOAN-TT/client/src/components/connect/Dropbox.vue","mtime":1573548262160},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/babel-loader/lib/index.js","mtime":1571304325577},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js","mtime":1571304326381}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.string.link\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _defineProperty from \"/var/www/html/Jobs/DOAN-TT/client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/var/www/html/Jobs/DOAN-TT/client/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\nimport UserIcon from \"../UserIcon\";\nimport config from \"../../config/config\";\nimport { extensionToMimeType, convertUrlToFile } from \"../../helpers\";\nexport default {\n  name: \"Dropbox\",\n  components: {\n    UserIcon: UserIcon\n  },\n  props: {\n    prop_files: Object,\n    addFiles: Function\n  },\n  data: function data() {\n    return {\n      pickerApiLoaded: false,\n      oauthToken: null\n    };\n  },\n  methods: {\n    chooserFile: function () {\n      var _chooserFile = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n\n        var options;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = {\n                  success: function () {\n                    var _success = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee(files) {\n                      var attachments;\n                      return regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              attachments = files && files.length > 0 && files.map(function (v) {\n                                // return convertUrlToFile(v, 'link');\n                                return _objectSpread({}, v, {\n                                  type: extensionToMimeType(\"\".concat(v.name.split(\".\")[1])),\n                                  size: v.bytes,\n                                  downloadUrl: v[\"link\"]\n                                });\n                              });\n\n                              _this.$emit(\"addFiles\", attachments, true);\n\n                            case 2:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee);\n                    }));\n\n                    function success(_x) {\n                      return _success.apply(this, arguments);\n                    }\n\n                    return success;\n                  }(),\n                  cancel: function cancel() {},\n                  linkType: \"direct\",\n                  multiselect: true,\n                  // extensions: [\".pdf\", \".doc\", \".docx\"],\n                  folderselect: false // sizeLimit: 102400000\n\n                };\n                Dropbox.choose(options);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function chooserFile() {\n        return _chooserFile.apply(this, arguments);\n      }\n\n      return chooserFile;\n    }()\n  },\n  mounted: function mounted() {\n    var dropBox = document.createElement(\"script\");\n    dropBox.setAttribute(\"src\", \"https://www.dropbox.com/static/api/2/dropins.js\");\n    dropBox.setAttribute(\"id\", \"dropboxjs\");\n    dropBox.setAttribute(\"data-app-key\", config.DROPBOX_KEY);\n    document.head.appendChild(dropBox);\n  }\n};",{"version":3,"sources":["Dropbox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAOA,OAAA,QAAA;AACA,OAAA,MAAA;AACA,SAAA,mBAAA,EAAA,gBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,SADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,QAAA,EAAA;AADA,GAFA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,UAAA,EAAA,MADA;AAEA,IAAA,QAAA,EAAA;AAFA,GALA;AASA,EAAA,IATA,kBASA;AACA,WAAA;AACA,MAAA,eAAA,EAAA,KADA;AAEA,MAAA,UAAA,EAAA;AAFA,KAAA;AAIA,GAdA;AAeA,EAAA,OAAA,EAAA;AACA,IAAA,WADA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,gBAAA,OAFA,GAEA;AACA,kBAAA,OAAA;AAAA;AAAA;AAAA,4CAAA,iBAAA,KAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,8BAAA,WADA,GAEA,KAAA,IACA,KAAA,CAAA,MAAA,GAAA,CADA,IAEA,KAAA,CAAA,GAAA,CAAA,UAAA,CAAA,EAAA;AACA;AACA,yDACA,CADA;AAEA,kCAAA,IAAA,EAAA,mBAAA,WAAA,CAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA,EAFA;AAGA,kCAAA,IAAA,EAAA,CAAA,CAAA,KAHA;AAIA,kCAAA,WAAA,EAAA,CAAA,CAAA,MAAA;AAJA;AAMA,+BARA,CAJA;;AAaA,8BAAA,KAAA,CAAA,KAAA,CAAA,UAAA,EAAA,WAAA,EAAA,IAAA;;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,qBADA;AAgBA,kBAAA,MAAA,EAAA,kBAAA,CAAA,CAhBA;AAiBA,kBAAA,QAAA,EAAA,QAjBA;AAkBA,kBAAA,WAAA,EAAA,IAlBA;AAmBA;AACA,kBAAA,YAAA,EAAA,KApBA,CAqBA;;AArBA,iBAFA;AAyBA,gBAAA,OAAA,CAAA,MAAA,CAAA,OAAA;;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,GAfA;AA2CA,EAAA,OA3CA,qBA2CA;AACA,QAAA,OAAA,GAAA,QAAA,CAAA,aAAA,CAAA,QAAA,CAAA;AACA,IAAA,OAAA,CAAA,YAAA,CACA,KADA,EAEA,iDAFA;AAIA,IAAA,OAAA,CAAA,YAAA,CAAA,IAAA,EAAA,WAAA;AACA,IAAA,OAAA,CAAA,YAAA,CAAA,cAAA,EAAA,MAAA,CAAA,WAAA;AACA,IAAA,QAAA,CAAA,IAAA,CAAA,WAAA,CAAA,OAAA;AACA;AApDA,CAAA","sourcesContent":["<template>\n  <span v-on:click=\"chooserFile()\">\n    <UserIcon icon=\"dropbox.svg\" class=\"store-src-item\" />\n  </span>\n</template>\n\n<script>\nimport UserIcon from \"../UserIcon\";\nimport config from \"../../config/config\";\nimport { extensionToMimeType, convertUrlToFile } from \"../../helpers\";\n\nexport default {\n  name: \"Dropbox\",\n  components: {\n    UserIcon\n  },\n  props: {\n    prop_files: Object,\n    addFiles: Function\n  },\n  data() {\n    return {\n      pickerApiLoaded: false,\n      oauthToken: null\n    };\n  },\n  methods: {\n    async chooserFile() {\n      let options = {\n        success: async files => {\n          let attachments =\n            files &&\n            files.length > 0 &&\n            files.map(v => {\n              // return convertUrlToFile(v, 'link');\n              return {\n                ...v,\n                type: extensionToMimeType(`${v.name.split(\".\")[1]}`),\n                size: v.bytes,\n                downloadUrl: v[\"link\"],\n              };\n            });\n          this.$emit(\"addFiles\", attachments, true );\n        },\n        cancel: function() {},\n        linkType: \"direct\",\n        multiselect: true,\n        // extensions: [\".pdf\", \".doc\", \".docx\"],\n        folderselect: false\n        // sizeLimit: 102400000\n      };\n      Dropbox.choose(options);\n    }\n  },\n  mounted() {\n    let dropBox = document.createElement(\"script\");\n    dropBox.setAttribute(\n      \"src\",\n      \"https://www.dropbox.com/static/api/2/dropins.js\"\n    );\n    dropBox.setAttribute(\"id\", \"dropboxjs\");\n    dropBox.setAttribute(\"data-app-key\", config.DROPBOX_KEY);\n    document.head.appendChild(dropBox);\n  }\n};\n</script>\n"],"sourceRoot":"src/components/connect"}]}