{"remainingRequest":"/var/www/html/Jobs/DOAN-TT/client/node_modules/babel-loader/lib/index.js!/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/Jobs/DOAN-TT/client/src/views/authentication/ForgotPassword.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/Jobs/DOAN-TT/client/src/views/authentication/ForgotPassword.vue","mtime":1573548269879},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/babel-loader/lib/index.js","mtime":1571304325577},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/cache-loader/dist/cjs.js","mtime":1571633391755},{"path":"/var/www/html/Jobs/DOAN-TT/client/node_modules/vue-loader/lib/index.js","mtime":1571304326381}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport AuthHeader from \"./AuthHeader\";\nimport Instruction from \"../../components/password/Instruction.modal\";\nimport { authentication } from \"../../mixins/authentication\";\nexport default {\n  name: \"ForgotPassword\",\n  mixins: [authentication],\n  components: {\n    Instruction: Instruction,\n    AuthHeader: AuthHeader\n  },\n  mounted: function mounted() {// this.onSuccess()\n  },\n  data: function data() {\n    return {\n      form: {\n        email: ''\n      },\n      validator: {\n        email: {\n          valid: true,\n          focus: false,\n          blured: false,\n          text: 'Please input a valid Email',\n          error: false,\n          last: ''\n        }\n      },\n      isRequestFailed: false\n    };\n  },\n  methods: {\n    onRequest: function onRequest() {\n      var vm = this;\n\n      if (!vm.validate()) {\n        return;\n      }\n\n      localStorage.setItem('forgot-form', JSON.stringify(vm.form));\n      vm.createPasswordToken(vm.form).then(function (response) {\n        vm.onSuccess();\n      }).catch(function (error) {\n        if (error.response.status == 404) {\n          var errors = error.response.data.errors;\n\n          if (errors.email.length > 0) {\n            vm.validator.email.error = true;\n            vm.validator.email.text = errors.email[0];\n            vm.validator.email.last = vm.form.email;\n          }\n        }\n      });\n    },\n    onSuccess: function onSuccess() {\n      this.$bvModal.show('modal-instruction');\n    },\n    validate: function validate() {\n      var vm = this;\n      vm.validator.email.blured = true;\n\n      if (vm.validEmail(vm.form.email)) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    validEmail: function validEmail(email) {\n      var vm = this;\n\n      if (email == vm.validator.email.last) {\n        return;\n      }\n\n      vm.validator.email.error = false;\n      vm.validator.email.last = '';\n      var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      vm.validator.email.valid = re.test(email);\n      var isValid = re.test(email);\n\n      if (isValid) {\n        return true;\n      } else {\n        vm.validator.email.valid = false;\n        vm.validator.email.text = 'Please input a valid Email';\n        return false;\n      }\n    },\n    toLogin: function toLogin() {\n      this.$router.push({\n        name: 'Login'\n      });\n    }\n  }\n};",{"version":3,"sources":["ForgotPassword.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <b-container fluid class=\"auth-page reset-password\">\n\n    <instruction></instruction>\n\n    <b-row class=\"container header\">\n      <b-col md=\"12\">\n        \n        <AuthHeader />\n\n      </b-col>\n    </b-row>\n\n    <b-row class=\"auth-form\">\n      <b-col lg=\"5\" md=\"8\" offset-md=\"2\" class=\"wrapper\">\n        <b-form @submit.prevent=\"onRequest\">\n          <h3 class=\"form-title\">{{ $t(\"auth.forgottitle\") }}</h3>\n          <span class=\"form-subtitle text-gray\">{{ $t(\"auth.forgotsubtitle\") }} <b-link href=\"javascript:;\" @click=\"toLogin\" class=\"text-coffee-light link\">{{ $t(\"auth.forgotsubtitle2\") }}</b-link></span>\n          <b-form-group id=\"grpEmail\"\n                        :class=\"{\n                          'form-group-withicon': true,\n                          'form-group-focus': validator.email.focus && !validator.email.error && (!validator.email.blured || validEmail(form.email)),\n                          'form-group-invalid': !validEmail(form.email) && validator.email.blured,\n                          'form-group-valid': validator.email.blured && (validEmail(form.email) && !validator.email.error)\n                        }\">\n            <b-form-input id=\"email\"\n                        :class=\"{\n                          'form-control-coffee': true,\n                          'input-invalid': !validEmail(form.email) && validator.email.blured,\n                          'input-valid': validator.email.blured && (validEmail(form.email) && !validator.email.error)\n                        }\"\n                        @blur=\"validator.email.blured = true, validator.email.focus = false\"\n                        @focus=\"validator.email.focus = true\"\n                        type=\"email\"\n                        v-model=\"form.email\"\n                        :placeholder=\"$t('auth.input.email')\">\n            </b-form-input>\n            <font-awesome-icon icon=\"envelope-open\" />\n            <p class=\"validation-error\" v-if=\"!validEmail(form.email) && validator.email.blured\">{{ validator.email.text }}</p>\n          </b-form-group>\n          <input type=\"submit\" class=\"btn btn-block btn-md btn-coffee\" :value=\"$t('auth.button.submit')\"/>\n        </b-form>\n        <span class=\"text-gray\" style=\"display: block; margin-top: 20px; text-align: center;\">{{ $t(\"auth.forgotdesc\") }}</span>\n      </b-col>\n    </b-row>\n  </b-container>\n</template>\n\n<script>\nimport AuthHeader from './AuthHeader'\nimport Instruction from '../../components/password/Instruction.modal'\n\nimport { authentication } from '../../mixins/authentication'\n\nexport default {\n    name: \"ForgotPassword\",\n    mixins: [authentication],\n    components: {\n        Instruction,\n        AuthHeader\n    },\n    mounted() {\n        // this.onSuccess()\n    },\n    data() {\n        return {\n            form: {\n                email: ''\n            },\n            validator: {\n                email: {\n                    valid: true,\n                    focus: false,\n                    blured: false,\n                    text: 'Please input a valid Email',\n                    error: false,\n                    last: ''\n                },\n            },\n            isRequestFailed: false\n        }\n    },\n    methods: {\n        onRequest() {\n            var vm = this\n\n            if (!vm.validate()) {\n                return\n            }\n\n            localStorage.setItem('forgot-form', JSON.stringify(vm.form))\n\n            vm.createPasswordToken(vm.form)\n                .then(response => {\n                    vm.onSuccess()\n                })\n                .catch(error => {\n                    if (error.response.status == 404) {\n                        var errors = error.response.data.errors\n                        if (errors.email.length > 0) {\n                            vm.validator.email.error = true\n                            vm.validator.email.text = errors.email[0]\n                            vm.validator.email.last = vm.form.email\n                        }\n                    }\n                })\n        },\n        onSuccess() {\n            this.$bvModal.show('modal-instruction')\n        },\n        validate() {\n            var vm = this\n\n            vm.validator.email.blured = true\n\n            if (vm.validEmail(vm.form.email)) {\n                return true\n            } else {\n                return false\n            }\n        },\n        validEmail(email) {\n            var vm = this\n\n            if (email == vm.validator.email.last) {\n                return\n            }\n\n            vm.validator.email.error = false\n            vm.validator.email.last = ''\n\n            var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n            vm.validator.email.valid = re.test(email)\n\n            var isValid = re.test(email)\n            if (isValid) {\n                return true\n            } else {\n                vm.validator.email.valid = false\n                vm.validator.email.text = 'Please input a valid Email'\n                return false\n            }\n        },\n        toLogin() {\n            this.$router.push({ name: 'Login' })\n        }\n    }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n// @import \"./authentication.scss\";\n</style>\n"],"sourceRoot":"src/views/authentication"}]}